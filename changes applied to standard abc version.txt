Collection of all the changes needed to extend abc (version 1.3, future versions need extra changes because of changes to the extension mecanism)

(+ raised memory limit of compilation to 512MB in abc-ja-exts/build.xml)

+ abc-ja-reentrant directory added (bulk of changes are implemented here!)

+ LOTS of members (including inner and inner-inner classes and it's methods) of CflowCodeGenUtils, CflowSetup and CflowPointcut were made public.

+ abc/src/abc/weaving/residues/ReentrancyPointcutAddOnResidue.java
+ abc/src/abc/weaving/aspectinfo/ReentrancyPointcutAddOn.java

+ places where code generation routines were inserted directly into abc code:

	  --abc/src/abc/weaving/residues/IfResidue.java--

Index: .
===================================================================
--- .	(revisi贸n: 2091)
+++ .	(copia de trabajo)
@@ -91,6 +91,38 @@
 	List actuals=new Vector(args.size());
 	Iterator it=args.iterator();
 	Stmt currStmt = begin;
+
+        /* REENTRANCY_LEVELS_EXTENSION code */
+ 
+        //insert levelup statement
+        Stmt levelUpStmt = Jimple.v().newInvokeStmt(Jimple.v().newStaticInvokeExpr(Scene.v().getMethod("<abc.reentrant.runtime.Level: void forceUnmanagedUp()>").makeRef()));
+        units.insertAfter(levelUpStmt, currStmt);
+        currStmt = levelUpStmt;
+
+        //insert push statement
+        String aspectClassFullName = impl.getDeclaringClass().getJavaPackageName()+"."+impl.getDeclaringClass().getJavaStyleName();
+
+        Local aspectRef = localgen.generateLocal(method.getDeclaringClass().getType(), "aspectRef");
+
+        Stmt getAspectRefStmt = Jimple.v().newAssignStmt(
+                aspectRef,
+                Jimple.v().newStaticInvokeExpr(Scene.v().getMethod("<"+ aspectClassFullName +": "+ aspectClassFullName  +" aspectOf()>").makeRef())
+                );
+
+        units.insertAfter(getAspectRefStmt, currStmt);
+        currStmt = getAspectRefStmt;
+
+
+        Stmt pushAspectStmt = Jimple.v().newInvokeStmt(
+                Jimple.v().newStaticInvokeExpr(Scene.v().getMethod("<abc.reentrant.runtime.AspectStack: boolean push(java.lang.Object)>").makeRef(), aspectRef)
+                );
+
+        units.insertAfter(pushAspectStmt, currStmt);
+        currStmt = pushAspectStmt;
+
+        /* REENTRANCY_LEVELS_EXTENSION code */
+
+
 	while(it.hasNext()) {
 		WeavingVar wv = (WeavingVar)it.next();
 		Local loc = wv.get();
@@ -138,6 +170,20 @@
     Tagger.tagStmt(abort, wc);
 	units.insertAfter(assign,currStmt);
 	units.insertAfter(abort,assign);
+
+        /* REENTRANCY_LEVELS_EXTENSION code */
+        
+        Stmt levelDownStmt = Jimple.v().newInvokeStmt(Jimple.v().newStaticInvokeExpr(Scene.v().getMethod("<abc.reentrant.runtime.Level: void forceUnmanagedDown()>").makeRef())); //ok??
+        units.insertBefore(levelDownStmt, abort);
+
+        Stmt popAspectStmt = Jimple.v().newInvokeStmt(
+                Jimple.v().newStaticInvokeExpr(Scene.v().getMethod("<abc.reentrant.runtime.AspectStack: java.lang.Object pop()>").makeRef())
+                );
+        units.insertBefore(popAspectStmt, abort);
+
+        /* REENTRANCY_LEVELS_EXTENSION code */
+
+
 	return abort;
     }
 }





	  --abc/src/abc/weaving/weaver/around/AdviceApplicationInfo.java--


Index: .
===================================================================
--- .	(revisi贸n: 2091)
+++ .	(copia de trabajo)
@@ -964,6 +964,18 @@
 		Chain invokeStmts = adviceAppl.advice.makeAdviceExecutionStmts(
 				adviceAppl, lg, wc);
 
+		/* REENTRANCY_LEVELS_EXTENSION code */
+
+		//hack: this works around an assumtion made about the last statement
+		Stmt real_last = (Stmt) invokeStmts.getLast();
+		invokeStmts.removeLast();
+		Stmt real_last_predecessor = (Stmt) invokeStmts.getLast();
+		invokeStmts.removeLast();
+
+		/* REENTRANCY_LEVELS_EXTENSION code */
+
+
+
 		VirtualInvokeExpr invokeEx = (VirtualInvokeExpr) ((InvokeStmt) invokeStmts
 				.getLast()).getInvokeExpr();
 		Local aspectRef = (Local) invokeEx.getBase();
@@ -1061,6 +1073,16 @@
 
 		//if (abc.main.Debug.v().aroundWeaver)
 		//	shadowMethodBody.validate();
+
+		/* REENTRANCY_LEVELS_EXTENSION code */
+
+		//hack: this works-around an assumtion made about the last instruction
+		shadowMethodStatements.insertAfter(real_last, invokeStmt);
+		shadowMethodStatements.insertAfter(real_last_predecessor, invokeStmt);
+
+		/* REENTRANCY_LEVELS_EXTENSION code */
+
+
 	}
 
 	private Local findReturnedLocal() {







	  --abc/src/abc/weaving/aspectinfo/AdviceDecl.java--

Index: .
===================================================================
--- .	(revisi贸n: 2091)
+++ .	(copia de trabajo)
@@ -244,6 +244,40 @@
 
         Chain c = new HashChain();
 
+
+        /* REENTRANCY_LEVELS_EXTENSION code */
+
+        //inserting level up
+        Scene.v().loadClassAndSupport("abc.reentrant.runtime.Level");
+        //insert a staticinvoke to set the level up (need a new method for that btw)
+        Stmt levelUpStmt = Jimple.v().newInvokeStmt(Jimple.v().newStaticInvokeExpr(Scene.v().getMethod("<abc.reentrant.runtime.Level: void forceUnmanagedUp()>").makeRef())); //ok??
+        c.addFirst(levelUpStmt);
+
+
+
+        //aspect push code
+        Local aspectRef = localgen.generateLocal(this.getAspect().getInstanceClass().getSootClass().getType(), "aspectRef");
+
+        Stmt getAspectRefStmt = Jimple.v().newAssignStmt(
+                aspectRef,
+                Jimple.v().newStaticInvokeExpr(Scene.v().getMethod("<"+ this.getAspect().getInstanceClass().getJvmName() +": "+ this.getAspect().getInstanceClass().getJvmName() +" aspectOf()>").makeRef())
+                );
+
+        c.insertAfter(getAspectRefStmt, levelUpStmt);
+
+
+        Stmt pushAspectStmt = Jimple.v().newInvokeStmt(
+                Jimple.v().newStaticInvokeExpr(Scene.v().getMethod("<abc.reentrant.runtime.AspectStack: boolean push(java.lang.Object)>").makeRef(), aspectRef)
+                );
+
+        c.insertAfter(pushAspectStmt, getAspectRefStmt);
+
+        /* REENTRANCY_LEVELS_EXTENSION code */
+
+
+
+
+
         AdviceWeavingContext awc=(AdviceWeavingContext) wc;
 
         SootMethod advicemethod = getImpl().getSootMethod();
@@ -264,6 +298,24 @@
             s.addTag(new soot.tagkit.StringTag
                      ("^^ invocation of advice body - residue: "+adviceappl.getResidue()));
         c.addLast(s);
+
+
+	/* REENTRANCY_LEVELS_EXTENSION code */
+
+	//aspect pop code
+        Stmt popAspectStmt = Jimple.v().newInvokeStmt(
+                Jimple.v().newStaticInvokeExpr(Scene.v().getMethod("<abc.reentrant.runtime.AspectStack: java.lang.Object pop()>").makeRef())
+                );
+
+        c.addLast(popAspectStmt);
+
+        //inserting level down
+        //insert a staticinvoke to set the level down
+        Stmt levelDownStmt = Jimple.v().newInvokeStmt(Jimple.v().newStaticInvokeExpr(Scene.v().getMethod("<abc.reentrant.runtime.Level: void forceUnmanagedDown()>").makeRef())); //ok??
+        c.addLast(levelDownStmt);
+
+	/* REENTRANCY_LEVELS_EXTENSION code */
+
         return (c);
 
     }







         --abc/src/abc/weaving/weaver/around/ProceedInvocation.java--

Index: .
===================================================================
--- .	(revisi贸n: 2091)
+++ .	(copia de trabajo)
@@ -39,6 +39,10 @@
 import abc.weaving.tagkit.InstructionKindTag;
 import abc.weaving.tagkit.Tagger;
 
+/* REENTRANCY_LEVELS_EXTENSION code */
+import soot.RefType;
+import soot.jimple.ThisRef;
+/* REENTRANCY_LEVELS_EXTENSION code */
 
 public class ProceedInvocation {
 	private final AdviceLocalMethod enclosingMethod;
@@ -202,6 +206,39 @@
 			// just in case: // TODO: what for?
 			//statements.insertBefore(Jimple.v().newGotoStmt(this.end), this.end);
 		}
+
+		/* REENTRANCY_LEVELS_EXTENSION code */
+
+		//level down after this.begin
+		//level up before this.begin(that is, to restore the state before the proceed)
+		Stmt levelUpStmt = Jimple.v().newInvokeStmt(Jimple.v().newStaticInvokeExpr(Scene.v().getMethod("<abc.reentrant.runtime.Level: void forceUnmanagedUp()>").makeRef())); //ok??
+		Stmt levelDownStmt = Jimple.v().newInvokeStmt(Jimple.v().newStaticInvokeExpr(Scene.v().getMethod("<abc.reentrant.runtime.Level: void forceUnmanagedDown()>").makeRef())); //ok??
+		
+		statements.insertAfter(levelDownStmt, this.begin);
+		statements.insertBefore(levelUpStmt, this.end);
+
+
+		//ppo in the aspectStack before  proceed
+		Stmt popAspectStmt = Jimple.v().newInvokeStmt(
+			Jimple.v().newStaticInvokeExpr(Scene.v().getMethod("<abc.reentrant.runtime.AspectStack: java.lang.Object pop()>").makeRef())
+			);
+
+		statements.insertAfter(popAspectStmt, this.begin);
+
+		//push in the aspectStack after proceed
+		LocalGeneratorEx lg = new LocalGeneratorEx(this.enclosingMethod.methodBody);
+		Local aspectRefLocal = lg.generateLocal(RefType.v("java.lang.Object"), "aspectRef");
+		ThisRef aspectRef = Jimple.v().newThisRef(RefType.v("java.lang.Object"));
+		Stmt assignAspectRefToLocal = Jimple.v().newIdentityStmt(aspectRefLocal, aspectRef);
+
+		Stmt pushAspectStmt = Jimple.v().newInvokeStmt(
+			Jimple.v().newStaticInvokeExpr(Scene.v().getMethod("<abc.reentrant.runtime.AspectStack: boolean push(java.lang.Object)>").makeRef(), aspectRefLocal)
+			);
+
+		statements.insertBefore(assignAspectRefToLocal, this.end);
+		statements.insertBefore(pushAspectStmt, this.end);
+
+		/* REENTRANCY_LEVELS_EXTENSION code */
 	}
 
 }
