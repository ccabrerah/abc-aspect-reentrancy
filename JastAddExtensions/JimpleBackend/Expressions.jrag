/*
 * The JastAdd Extensible Java Compiler (http://jastadd.org) is covered
 * by the modified BSD License. You should have received a copy of the
 * modified BSD license with this compiler.
 * 
 * Copyright (c) 2005-2008, Torbjorn Ekman
 * All rights reserved.
 */

aspect Expressions {
  public soot.Value Expr.eval(Body b) {
    throw new Error("Operation eval not supported for " + getClass().getName());
  }

  public soot.Value ParExpr.eval(Body b) { return getExpr().eval(b); }

  public soot.Value IntegerLiteral.eval(Body b) {
    return IntType.emitConstant(constant().intValue());
  }
  public soot.Value CharacterLiteral.eval(Body b) {
    return IntType.emitConstant(constant().intValue());
  }
  public soot.Value LongLiteral.eval(Body b) {
    return soot.jimple.LongConstant.v(constant().longValue());
  }
  public soot.Value FloatingPointLiteral.eval(Body b) {
    return soot.jimple.FloatConstant.v(constant().floatValue());
  }
  public soot.Value DoubleLiteral.eval(Body b) {
    return soot.jimple.DoubleConstant.v(constant().doubleValue());
  }
  public soot.Value StringLiteral.eval(Body b) {
    return soot.jimple.StringConstant.v(getLITERAL());
  }
  public soot.Value NullLiteral.eval(Body b) {
    return soot.jimple.NullConstant.v();
  }
  public soot.Value BooleanLiteral.eval(Body b) {
    return BooleanType.emitConstant(constant().booleanValue());
  }

  public static soot.Value IntType.emitConstant(int i) {
    return IntConstant.v(i);
  }
  public static soot.Value BooleanType.emitConstant(boolean b) {
    return soot.jimple.IntConstant.v(b ? 1 : 0);
  }

  // simple assign expression
  public soot.Value AssignSimpleExpr.eval(Body b) {
    Value lvalue = getDest().eval(b);
    Value rvalue = asRValue(b,
      getSource().type().emitCastTo(b, // Assign conversion
        getSource(),
        getDest().type()
      )
    );
    return getDest().emitStore(b, lvalue, asImmediate(b, rvalue));
  }

  // compound assign expression
  public soot.Value AssignExpr.eval(Body b) {
    TypeDecl dest = getDest().type();
    TypeDecl source = getSource().type();
    TypeDecl type;
    if(dest.isNumericType() && source.isNumericType())
      type = dest.binaryNumericPromotion(source);
    else 
      type = dest;
    Value lvalue = getDest().eval(b);
    Value v = lvalue instanceof Local ? lvalue : (Value)lvalue.clone();
    Value value = b.newTemp(dest.emitCastTo(b, v, type));
    Value rvalue = source.emitCastTo(b, getSource(), type);
    Value result = asImmediate(b, type.emitCastTo(b,
      createAssignOp(b, value, rvalue),
      dest
    ));
    getDest().emitStore(b, lvalue, result);
    return result;
  }

  // string addition assign expression
  public soot.Value AssignPlusExpr.eval(Body b) {
    TypeDecl dest = getDest().type();
    TypeDecl source = getSource().type();
    if(dest.isString()) {
      
      Value lvalue = getDest().eval(b);

      Value v = asImmediate(b, lvalue);

      // new StringBuffer(left)
      Local local = b.newTemp(Jimple.v().newNewExpr(
        lookupType("java.lang", "StringBuffer").sootRef()));
      b.setLine(this);
      b.add(Jimple.v().newInvokeStmt(
        Jimple.v().newSpecialInvokeExpr(local, 
          Scene.v().getMethod("<java.lang.StringBuffer: void <init>(java.lang.String)>").makeRef(),
          v
        )));

      // append right
      Local rightResult = b.newTemp(
        Jimple.v().newVirtualInvokeExpr(local,
          lookupType("java.lang", "StringBuffer").methodWithArgs("append", new TypeDecl[] { source.stringPromotion() }).sootRef(),
          asImmediate(b, getSource().eval(b))
        ));

      // toString
      Local result = b.newTemp(
        Jimple.v().newVirtualInvokeExpr(rightResult,
          Scene.v().getMethod("<java.lang.StringBuffer: java.lang.String toString()>").makeRef()
        ));
  
      getDest().emitStore(b, lvalue, result);
      return result;
    }
    else {
      return super.eval(b);
    }
  }

  // shift assign expression
  public soot.Value AssignExpr.emitShiftExpr(Body b) {
    TypeDecl dest = getDest().type();
    TypeDecl source = getSource().type();
    TypeDecl type = dest.unaryNumericPromotion();

    Value lvalue = getDest().eval(b);
    Value v = lvalue instanceof Local ? lvalue : (Value)lvalue.clone();
    Value value = b.newTemp(dest.emitCastTo(b, v, type));
    Value rvalue = source.emitCastTo(b, getSource(), typeInt());
    Value result = asImmediate(b, type.emitCastTo(b,
      createAssignOp(b, value, rvalue),
      dest
    ));
    getDest().emitStore(b, lvalue, result);
    return result;
  }

  public soot.Value AssignLShiftExpr.eval(Body b) { return emitShiftExpr(b); }
  public soot.Value AssignRShiftExpr.eval(Body b) { return emitShiftExpr(b); }
  public soot.Value AssignURShiftExpr.eval(Body b) { return emitShiftExpr(b); }


  // create the operation for a compound assign expression
  public soot.Value AssignExpr.createAssignOp(Body b, soot.Value fst, soot.Value snd) {
    throw new Error("Operation createAssignOp is not implemented for " + getClass().getName());
  }
  public soot.Value AssignMulExpr.createAssignOp(Body b, soot.Value fst, soot.Value snd) {
    return asImmediate(b, Jimple.v().newMulExpr(asImmediate(b, fst), asImmediate(b, snd)));
  }
  public soot.Value AssignDivExpr.createAssignOp(Body b, soot.Value fst, soot.Value snd) {
    return Jimple.v().newDivExpr(asImmediate(b, fst), asImmediate(b, snd));
  }
  public soot.Value AssignModExpr.createAssignOp(Body b, soot.Value fst, soot.Value snd) {
    return Jimple.v().newRemExpr(asImmediate(b, fst), asImmediate(b, snd));
  }
  public soot.Value AssignPlusExpr.createAssignOp(Body b, soot.Value fst, soot.Value snd) {
    return Jimple.v().newAddExpr(asImmediate(b, fst), asImmediate(b, snd));
  }
  public soot.Value AssignMinusExpr.createAssignOp(Body b, soot.Value fst, soot.Value snd) {
    return Jimple.v().newSubExpr(asImmediate(b, fst), asImmediate(b, snd));
  }
  public soot.Value AssignLShiftExpr.createAssignOp(Body b, soot.Value fst, soot.Value snd) {
    return Jimple.v().newShlExpr(asImmediate(b, fst), asImmediate(b, snd));
  }
  public soot.Value AssignRShiftExpr.createAssignOp(Body b, soot.Value fst, soot.Value snd) {
    return Jimple.v().newShrExpr(asImmediate(b, fst), asImmediate(b, snd));
  }
  public soot.Value AssignURShiftExpr.createAssignOp(Body b, soot.Value fst, soot.Value snd) {
    return Jimple.v().newUshrExpr(asImmediate(b, fst), asImmediate(b, snd));
  }
  public soot.Value AssignAndExpr.createAssignOp(Body b, soot.Value fst, soot.Value snd) {
    return Jimple.v().newAndExpr(asImmediate(b, fst), asImmediate(b, snd));
  }
  public soot.Value AssignXorExpr.createAssignOp(Body b, soot.Value fst, soot.Value snd) {
    return Jimple.v().newXorExpr(asImmediate(b, fst), asImmediate(b, snd));
  }
  public soot.Value AssignOrExpr.createAssignOp(Body b, soot.Value fst, soot.Value snd) {
    return Jimple.v().newOrExpr(asImmediate(b, fst), asImmediate(b, snd));
  }

  public soot.Value AbstractDot.eval(Body b) {
    return lastAccess().eval(b);
  }

  public soot.Value VarAccess.eval(Body b) {
    Variable v = decl();
    if(v instanceof VariableDeclaration) {
      VariableDeclaration decl = (VariableDeclaration)v;
      if(decl.hostType() == hostType())
        return decl.local;
      else
        return emitLoadLocalInNestedClass(b, decl);
    }
    else if(v instanceof ParameterDeclaration) {
      ParameterDeclaration decl = (ParameterDeclaration)v;
      if(decl.hostType() == hostType())
        return decl.local;
      else
        return emitLoadLocalInNestedClass(b, decl);
    }
    else if(v instanceof FieldDeclaration) {
      FieldDeclaration f = (FieldDeclaration)v;
      if(f.hostType().isArrayDecl() && f.name().equals("length")) {
        return Jimple.v().newLengthExpr(asImmediate(b, createLoadQualifier(b)));
      }
      if(f.isStatic()) {
        if(isQualified() && !qualifier().isTypeAccess())
          b.newTemp(qualifier().eval(b));
        if(requiresAccessor()) {
          ArrayList list = new ArrayList();
          return Jimple.v().newStaticInvokeExpr(f.createAccessor(fieldQualifierType()).sootRef(), list);
        }
        else
          return Jimple.v().newStaticFieldRef(sootRef());
      }
      else {
        if(requiresAccessor()) {
          soot.Local base = base(b);
          ArrayList list = new ArrayList();
          list.add(base);
          return Jimple.v().newStaticInvokeExpr(f.createAccessor(fieldQualifierType()).sootRef(), list);
        }
        else {
          soot.Local base = createLoadQualifier(b);
          return Jimple.v().newInstanceFieldRef(base, sootRef());
        }
      }
    }
    else
      return super.eval(b);
  }
  private SootFieldRef VarAccess.sootRef() {
    FieldDeclaration decl = (FieldDeclaration)decl();
    SootFieldRef ref = Scene.v().makeFieldRef(
      fieldQualifierType().getSootClassDecl(),
      decl.name(),
      decl.type().getSootType(),
      decl.isStatic()
    );
    return ref;
  }



  syn lazy soot.Local VarAccess.base(Body b) = asLocal(b, createLoadQualifier(b));

  public soot.Value AbstractDot.emitStore(Body b, soot.Value lvalue, soot.Value rvalue) {
    return lastAccess().emitStore(b, lvalue, rvalue);
  }
  public soot.Value Expr.emitStore(Body b, soot.Value lvalue, soot.Value rvalue) {
    b.setLine(this);
    b.add(
      Jimple.v().newAssignStmt(
        lvalue,
        asLocal(b, rvalue, lvalue.getType())
      )
    );
    return rvalue;
  }
  public soot.Value VarAccess.emitStore(Body b, soot.Value lvalue, soot.Value rvalue) {
    Variable v = decl();
    if(v instanceof FieldDeclaration) {
      FieldDeclaration f = (FieldDeclaration)v;
      if(requiresAccessor()) {
        if(f.isStatic()) {
          ArrayList list = new ArrayList();
          list.add(rvalue);
          return asLocal(b, Jimple.v().newStaticInvokeExpr(f.createAccessorWrite(fieldQualifierType()).sootRef(), list));
        }
        else {
          soot.Local base = base(b);
          ArrayList list = new ArrayList();
          list.add(base);
          list.add(asLocal(b, rvalue, lvalue.getType()));
          return asLocal(b, Jimple.v().newStaticInvokeExpr(f.createAccessorWrite(fieldQualifierType()).sootRef(), list));
        }
      }
    }
    return super.emitStore(b, lvalue, rvalue);
  }

  inh boolean Access.inExplicitConstructorInvocation();
  public soot.Value Access.emitLoadLocalInNestedClass(Body b, Variable v) {
    if(inExplicitConstructorInvocation() && enclosingBodyDecl() instanceof ConstructorDecl) {
      ConstructorDecl c = (ConstructorDecl)enclosingBodyDecl();
      return ((ParameterDeclaration)c.parameterDeclaration(v.name()).iterator().next()).local;
    }
    else {
      return Jimple.v().newInstanceFieldRef(
        b.emitThis(hostType()),
        hostType().getSootClassDecl().getField("val$" + v.name(), v.type().getSootType()).makeRef()
      );
    }
  }
  public soot.Local VarAccess.createLoadQualifier(Body b) {
    Variable v = decl();
    if(v instanceof FieldDeclaration) {
      FieldDeclaration f = (FieldDeclaration)v;
      if(hasPrevExpr()) {
        // load explicit qualifier
        Local qualifier = asLocal(b, prevExpr().eval(b));
        // pop qualifier stack element for class variables
        // this qualifier must be computed to ensure side effects
        return qualifier;
      }
      else if(f.isInstanceVariable()) {
        return emitThis(b, fieldQualifierType());
      }
    }
    throw new Error("createLoadQualifier not supported for " + v.getClass().getName());
  }


  private ArrayList MethodAccess.buildArgList(Body b) {
    ArrayList list = new ArrayList();
    for(int i = 0; i < getNumArg(); i++)
      list.add(
        asImmediate(b,
          getArg(i).type().emitCastTo(b, // MethodInvocationConversion
            getArg(i),
            decl().getParameter(i).type()
          )
        )
      );
    return list;
  }

  public soot.Value MethodAccess.eval(Body b) {
    if(!decl().isStatic() && isQualified() && prevExpr().isSuperAccess()) {
      Local left = asLocal(b, createLoadQualifier(b));
      ArrayList list = buildArgList(b);
      soot.Value result;
      if(!hostType().instanceOf(prevExpr().type())) {
        MethodDecl m = decl().createSuperAccessor(superAccessorTarget());
        if(methodQualifierType().isInterfaceDecl())
          result = Jimple.v().newInterfaceInvokeExpr(left, m.sootRef(), list);
        else
          result = Jimple.v().newVirtualInvokeExpr(left, m.sootRef(), list);
      }
      else
        result = Jimple.v().newSpecialInvokeExpr(left, sootRef(), list);
      return type().isVoid() ? result : asLocal(b, result);
    }
    else {
      soot.Value result;
      if(!decl().isStatic()) {
        Local left = asLocal(b, createLoadQualifier(b));
        ArrayList list = buildArgList(b);
        if(methodQualifierType().isInterfaceDecl())
          result = Jimple.v().newInterfaceInvokeExpr(left, sootRef(), list);
        else
          result = Jimple.v().newVirtualInvokeExpr(left, sootRef(), list);
      }
      else {
        if(isQualified() && !qualifier().isTypeAccess())
          b.newTemp(qualifier().eval(b));
        ArrayList list = buildArgList(b);
        result = Jimple.v().newStaticInvokeExpr(sootRef(), list);
      }
      return type().isVoid() ? result : asLocal(b, result);
    }
  }

  private SootMethodRef MethodAccess.sootRef() {
    MethodDecl decl = decl();
    ArrayList parameters = new ArrayList();
    for(int i = 0; i < decl.getNumParameter(); i++)
      parameters.add(decl.getParameter(i).type().getSootType());
    SootMethodRef ref = Scene.v().makeMethodRef(
      methodQualifierType().getSootClassDecl(),
      decl.name(),
      parameters,
      decl.type().getSootType(),
      decl.isStatic()
    );
    return ref;
  }

  private soot.Value MethodAccess.createLoadQualifier(Body b) {
    MethodDecl m = decl();
    if(hasPrevExpr()) {
      // load explicit qualifier
      soot.Value v = prevExpr().eval(b);
      if(v ==  null)
        throw new Error("Problems evaluating " + prevExpr().getClass().getName());
      Local qualifier = asLocal(b, v /*prevExpr().eval(b)*/);
      // pop qualifier stack element for class variables
      // this qualifier must be computed to ensure side effects
      return qualifier;
    }
    else if(!m.isStatic()) {
      // load implicit this qualifier
      return emitThis(b, methodQualifierType());
    }
    throw new Error("createLoadQualifier not supported for " + m.getClass().getName());
  }

  public soot.Value ArrayAccess.eval(Body b) {
    soot.Value arrayRef = b.newTemp(prevExpr().eval(b));
    soot.Value arrayIndex = b.newTemp(getExpr().eval(b));
    return Jimple.v().newArrayRef(
      asLocal(b, arrayRef),
      asImmediate(b, arrayIndex)
    );
  }

  public soot.Value ThisAccess.eval(Body b) {
    return emitThis(b, decl());
  }
  
  public soot.Value SuperAccess.eval(Body b) {
    return emitThis(b, decl());
  }

  // load this where hostType is the target this instance 
  // supporting inner classes and in explicit contructor invocations
  public soot.Local Access.emitThis(Body b, TypeDecl targetDecl) {
    b.setLine(this);
    if(targetDecl == hostType())
      return b.emitThis(hostType());
    else {
      TypeDecl enclosing = hostType();
      Local base;
      if(inExplicitConstructorInvocation()) {
        base = asLocal(b,
          Jimple.v().newParameterRef(enclosing.getSootType(), 0)
        );
        enclosing = enclosing.enclosingType();
      }
      else {
        base = b.emitThis(hostType());
      }
      while(enclosing != targetDecl) {
        Local next = b.newTemp(enclosing.enclosingType().getSootType());
        b.add(
          Jimple.v().newAssignStmt(
            next,
            Jimple.v().newInstanceFieldRef(
              base,
              enclosing.getSootField("this$0", enclosing.enclosingType()).makeRef()
            )
          )
        );
        base = next;
        enclosing = enclosing.enclosingType();
      }
      return base;
    }
  }

  public soot.Value ConstructorAccess.eval(Body b) {
    b.setLine(this);
    ConstructorDecl c = decl();
    // this
    Local base = b.emitThis(hostType());
  
    int index = 0;
    ArrayList list = new ArrayList();
    // this$0
    if(c.needsEnclosing())
      list.add(asImmediate(b,
        Jimple.v().newParameterRef(hostType().enclosingType().getSootType(), index++)
      ));
    if(c.needsSuperEnclosing()) {
      TypeDecl superClass = ((ClassDecl)hostType()).superclass();
      list.add(asImmediate(b,
        Jimple.v().newParameterRef(superClass.enclosingType().getSootType(), index++)
      ));
    }
    // args
    for(int i = 0; i < getNumArg(); i++)
      list.add(asImmediate(b, 
         getArg(i).type().emitCastTo(b, getArg(i), c.getParameter(i).type()))); // MethodInvocationConversion

    if(decl().isPrivate() && decl().hostType() != hostType()) {
      list.add(asImmediate(b, soot.jimple.NullConstant.v()));
      b.add(
        Jimple.v().newInvokeStmt(
          Jimple.v().newSpecialInvokeExpr(base, decl().createAccessor().sootRef(), list)
        )
      );
      return base;
    }
    else {
      return Jimple.v().newSpecialInvokeExpr(base, c.sootRef(), list);
    }
  }

  public soot.Value SuperConstructorAccess.eval(Body b) {
    ConstructorDecl c = decl();
    // this
    Local base = b.emitThis(hostType());

    int index = 0;
    ArrayList list = new ArrayList();
    if(c.needsEnclosing()) {
      if(hasPrevExpr() && !prevExpr().isTypeAccess()) {
        list.add(asImmediate(b, prevExpr().eval(b)));
      }
      else {
        if(hostType().needsSuperEnclosing()) {
          soot.Type type = ((ClassDecl)hostType()).superclass().enclosingType().getSootType();
          if(hostType().needsEnclosing())
            list.add(asImmediate(b, Jimple.v().newParameterRef(type, 1)));
          else
            list.add(asImmediate(b, Jimple.v().newParameterRef(type, 0)));
        }
        else {
          list.add(emitThis(b, superConstructorQualifier(c.hostType().enclosingType())));
        }
      }
    }

    // args
    for(int i = 0; i < getNumArg(); i++)
      list.add(asImmediate(b, 
         getArg(i).type().emitCastTo(b, getArg(i), c.getParameter(i).type()))); // MethodInvocationConversion
 
    if(decl().isPrivate() && decl().hostType() != hostType()) {
      list.add(asImmediate(b, soot.jimple.NullConstant.v()));
      b.add(
        Jimple.v().newInvokeStmt(
          Jimple.v().newSpecialInvokeExpr(base, decl().createAccessor().sootRef(), list)
        )
      );
      return base;
    }
    else {
      return Jimple.v().newSpecialInvokeExpr(base, c.sootRef(), list);
    }
  }

  private soot.Value ClassInstanceExpr.emitLocalEnclosing(Body b, TypeDecl localClass) {
    if(!localClass.inStaticContext()) {
      return emitThis(b, localClass.enclosingType());
    }
    throw new Error("Not implemented");
  }

  private soot.Value ClassInstanceExpr.emitInnerMemberEnclosing(Body b, TypeDecl innerClass) {
    if(hasPrevExpr()) {
      Local base = asLocal(b, prevExpr().eval(b));
      b.setLine(this);
      b.add(Jimple.v().newInvokeStmt(
        Jimple.v().newVirtualInvokeExpr(
          base, 
          Scene.v().getMethod("<java.lang.Object: java.lang.Class getClass()>").makeRef()
        )
      ));
      return base;
    }
    else {
      TypeDecl enclosing = hostType();
      while(!enclosing.hasType(innerClass.name()))
        enclosing = enclosing.enclosingType();
      return emitThis(b, enclosing);
    }
  }

  public soot.Value ClassInstanceExpr.eval(Body b) {
    Local local = asLocal(b, Jimple.v().newNewExpr(type().sootRef()));
    ArrayList list = new ArrayList();

     // 15.9.2 first part
    if(type().isAnonymous()) {
      if(type().isAnonymousInNonStaticContext()) {
        list.add(asImmediate(b, b.emitThis(hostType())));
      }
      // 15.9.2 second part
      ClassDecl C = (ClassDecl)type();
      TypeDecl S = C.superclass();
      if(S.isLocalClass()) {
        if(!type().inStaticContext())
          list.add(asImmediate(b, emitLocalEnclosing(b, S)));
      }
      else if(S.isInnerType()) {
        list.add(asImmediate(b, emitInnerMemberEnclosing(b, S)));
      }
    }
    else if(type().isLocalClass()) {
      if(!type().inStaticContext())
        list.add(asImmediate(b, emitLocalEnclosing(b, type())));
    }
    else if(type().isInnerType()) {
      list.add(asImmediate(b, emitInnerMemberEnclosing(b, type())));
    }

    for(int i = 0; i < getNumArg(); i++)
      list.add(asImmediate(b, getArg(i).type().emitCastTo(b, getArg(i), decl().getParameter(i).type()))); // MethodInvocationConversion
  
    if(decl().isPrivate() && type() != hostType()) {
      list.add(asImmediate(b, soot.jimple.NullConstant.v()));
      b.setLine(this);
      b.add(
        Jimple.v().newInvokeStmt(
          Jimple.v().newSpecialInvokeExpr(local, decl().createAccessor().sootRef(), list)
        )
      );
      return local;
    }
    else {
      b.setLine(this);
      b.add(
        Jimple.v().newInvokeStmt(
          Jimple.v().newSpecialInvokeExpr(local, decl().sootRef(), list)
        )
      );
      return local;
    }
  }

  public soot.Value ArrayCreationExpr.eval(Body b) {
    if(hasArrayInit()) {
      return getArrayInit().eval(b);
    }
    else {
      ArrayList list = new ArrayList();
      getTypeAccess().addArraySize(b, list);
      if(numArrays() == 1) {
        soot.Value size = (soot.Value)list.get(0);
        return Jimple.v().newNewArrayExpr(
          type().componentType().getSootType(),
          asImmediate(b, size)
        );
      }
      else {
        return Jimple.v().newNewMultiArrayExpr(
          (soot.ArrayType)type().getSootType(),
          list
        );
      }
    }
  }

  public void Access.addArraySize(Body b, ArrayList list) {
  }
  public void ArrayTypeAccess.addArraySize(Body b, ArrayList list) {
    getAccess().addArraySize(b, list);
  }
  public void ArrayTypeWithSizeAccess.addArraySize(Body b, ArrayList list) {
    getAccess().addArraySize(b, list);
    list.add(asImmediate(b, getExpr().eval(b)));
  }

  public soot.Value ArrayInit.eval(Body b) {
    soot.Value size = IntType.emitConstant(getNumInit());
    Local array = asLocal(b, Jimple.v().newNewArrayExpr(
      type().componentType().getSootType(),
      asImmediate(b, size)
    ));
    for(int i = 0; i < getNumInit(); i++) {
      Value rvalue = 
        getInit(i).type().emitCastTo(b, // Assign conversion
          getInit(i),
          expectedType()
        );
      Value index = IntType.emitConstant(i);
      Value lvalue = Jimple.v().newArrayRef(array, index);
      b.setLine(this);
      b.add(Jimple.v().newAssignStmt(lvalue, asImmediate(b, rvalue)));
    }
    return array;
  }

  public soot.Value Unary.eval(Body b) {
    return super.eval(b);
  }
  public soot.Value MinusExpr.eval(Body b) { 
    return Jimple.v().newNegExpr(asImmediate(b, getOperand().eval(b)));
  }
  public soot.Value PlusExpr.eval(Body b) { return getOperand().eval(b); }
  public soot.Value BitNotExpr.eval(Body b) {
    soot.Value v = IntType.emitConstant(-1);
    soot.Local result = asLocal(b,
      soot.jimple.Jimple.v().newXorExpr(
        asImmediate(b, typeInt().emitCastTo(b, v, type())),
        asImmediate(b, getOperand().eval(b))
      )
    );
    return result;
  }
  // See BooleanExpressions.jrag for LogNotExpr

  public soot.Value CastExpr.eval(Body b) {
    if(isConstant())
      return emitConstant(constant());
    soot.Value operand = getExpr().eval(b);
    if (operand == NullConstant.v())
        return getExpr().type().emitCastTo(b, operand, type());
    return getExpr().type().emitCastTo(b, asLocal(b, operand), type());
  }

  public static soot.Value ASTNode.emitConstant(Constant constant) {
    if(constant instanceof Constant.ConstantInt)
      return IntType.emitConstant(constant.intValue());
    else if(constant instanceof Constant.ConstantLong)
      return soot.jimple.LongConstant.v(constant.longValue());
    else if(constant instanceof Constant.ConstantFloat)
      return soot.jimple.FloatConstant.v(constant.floatValue());
    else if(constant instanceof Constant.ConstantDouble)
      return soot.jimple.DoubleConstant.v(constant.doubleValue());
    else if(constant instanceof Constant.ConstantChar)
      return IntType.emitConstant(constant.intValue());
    else if(constant instanceof Constant.ConstantBoolean)
      return BooleanType.emitConstant(constant.booleanValue());
    else if(constant instanceof Constant.ConstantString)
      return soot.jimple.StringConstant.v(constant.stringValue());
    throw new Error("Unexpected constant");
  }

  public soot.Value Unary.emitPostfix(Body b, int constant) {
    soot.Value lvalue = getOperand().eval(b);
    Value v = lvalue instanceof Local ? lvalue : (Value)lvalue.clone();
    TypeDecl type = getOperand().type().binaryNumericPromotion(typeInt());
    Value value = b.newTemp(getOperand().type().emitCastTo(b, v, type));
    Value rvalue = typeInt().emitCastTo(b, IntType.emitConstant(constant), type);
    Value sum = asRValue(b, type.emitCastTo(b,
      Jimple.v().newAddExpr(asImmediate(b, value), asImmediate(b, rvalue)),
      getOperand().type()
    ));
    getOperand().emitStore(b, lvalue, sum);
    return value;
  }

  public soot.Value PostIncExpr.eval(Body b) { return emitPostfix(b, 1); }
  public soot.Value PostDecExpr.eval(Body b) { return emitPostfix(b, -1); }

  public soot.Value Unary.emitPrefix(Body b, int constant) {
    soot.Value lvalue = getOperand().eval(b);
    Value v = lvalue instanceof Local ? lvalue : (Value)lvalue.clone();
    TypeDecl type = getOperand().type().binaryNumericPromotion(typeInt());
    Value value = getOperand().type().emitCastTo(b, v, type);
    Value rvalue = typeInt().emitCastTo(b, IntType.emitConstant(constant), type);
    Value result = asLocal(b, type.emitCastTo(b,
      Jimple.v().newAddExpr(asImmediate(b, value), asImmediate(b, rvalue)),
      getOperand().type()
    ));
    getOperand().emitStore(b, lvalue, result);
    return result;
  }

  public soot.Value PreIncExpr.eval(Body b) { return emitPrefix(b, 1); }
  public soot.Value PreDecExpr.eval(Body b) { return emitPrefix(b, -1); }

  public soot.Value Binary.eval(Body b) {
    return asLocal(b, emitOperation(b, 
      getLeftOperand().type().emitCastTo(b,  // Binary numeric promotion
        getLeftOperand(),
        type()
      ),
      getRightOperand().type().emitCastTo(b, // Binary numeric promotion
        getRightOperand(),
        type()
      )
    ));
  }

  public soot.Value Binary.emitShiftExpr(Body b) {
    return asLocal(b, emitOperation(b, 
      getLeftOperand().type().emitCastTo(b,  // Binary numeric promotion
        getLeftOperand(),
        type()
      ),
      getRightOperand().type().emitCastTo(b,
        getRightOperand(),
        typeInt()
      )
    ));
  }

  public soot.Value LShiftExpr.eval(Body b) { return emitShiftExpr(b); }
  public soot.Value RShiftExpr.eval(Body b) { return emitShiftExpr(b); }
  public soot.Value URShiftExpr.eval(Body b) { return emitShiftExpr(b); }

  public soot.Value Binary.emitOperation(Body b, soot.Value left, soot.Value right) {
    throw new Error("emitOperation not implemented in " + getClass().getName());
  }
  public soot.Value AddExpr.emitOperation(Body b, soot.Value left, soot.Value right) {
    return asLocal(b, Jimple.v().newAddExpr(asImmediate(b, left), asImmediate(b, right)));
  }
  public soot.Value SubExpr.emitOperation(Body b, soot.Value left, soot.Value right) {
    return asLocal(b, Jimple.v().newSubExpr(asImmediate(b, left), asImmediate(b, right)));
  }
  public soot.Value MulExpr.emitOperation(Body b, soot.Value left, soot.Value right) {
    return asLocal(b, Jimple.v().newMulExpr(asImmediate(b, left), asImmediate(b, right)));
  }
  public soot.Value DivExpr.emitOperation(Body b, soot.Value left, soot.Value right) {
    return asLocal(b, Jimple.v().newDivExpr(asImmediate(b, left), asImmediate(b, right)));
  }
  public soot.Value ModExpr.emitOperation(Body b, soot.Value left, soot.Value right) {
    return asLocal(b, Jimple.v().newRemExpr(asImmediate(b, left), asImmediate(b, right)));
  }
  public soot.Value LShiftExpr.emitOperation(Body b, soot.Value left, soot.Value right) {
    return asLocal(b, Jimple.v().newShlExpr(asImmediate(b, left), asImmediate(b, right)));
  }
  public soot.Value RShiftExpr.emitOperation(Body b, soot.Value left, soot.Value right) {
    return asLocal(b, Jimple.v().newShrExpr(asImmediate(b, left), asImmediate(b, right)));
  }
  public soot.Value URShiftExpr.emitOperation(Body b, soot.Value left, soot.Value right) {
    return asLocal(b, Jimple.v().newUshrExpr(asImmediate(b, left), asImmediate(b, right)));
  }
  public soot.Value OrBitwiseExpr.emitOperation(Body b, soot.Value left, soot.Value right) {
    return asLocal(b, Jimple.v().newOrExpr(asImmediate(b, left), asImmediate(b, right)));
  }
  public soot.Value AndBitwiseExpr.emitOperation(Body b, soot.Value left, soot.Value right) {
    return asLocal(b, Jimple.v().newAndExpr(asImmediate(b, left), asImmediate(b, right)));
  }
  public soot.Value XorBitwiseExpr.emitOperation(Body b, soot.Value left, soot.Value right) {
    return asLocal(b, Jimple.v().newXorExpr(asImmediate(b, left), asImmediate(b, right)));
  }

  public soot.Value AddExpr.eval(Body b) {
    if(type().isString() && isConstant())
      return soot.jimple.StringConstant.v(constant().stringValue());
    if(isStringAdd()) {
      Local v;
      if(firstStringAddPart()) {
        // new StringBuffer
        v = b.newTemp(Jimple.v().newNewExpr(
          lookupType("java.lang", "StringBuffer").sootRef()));
        b.setLine(this);
        b.add(Jimple.v().newInvokeStmt(
          Jimple.v().newSpecialInvokeExpr(v, 
          Scene.v().getMethod("<java.lang.StringBuffer: void <init>()>").makeRef()
        )));
        b.setLine(this);
        b.add(Jimple.v().newInvokeStmt(
          Jimple.v().newVirtualInvokeExpr(v,
            lookupType("java.lang", "StringBuffer").methodWithArgs("append", new TypeDecl[] { getLeftOperand().type().stringPromotion() }).sootRef(),
            asImmediate(b, getLeftOperand().eval(b))
          )));
      }
      else
        v = (Local)getLeftOperand().eval(b);
      // append
      b.setLine(this);
      b.add(Jimple.v().newInvokeStmt(
        Jimple.v().newVirtualInvokeExpr(v,
          lookupType("java.lang", "StringBuffer").methodWithArgs("append", new TypeDecl[] { getRightOperand().type().stringPromotion() }).sootRef(),
          asImmediate(b, getRightOperand().eval(b))
        )));
      if(lastStringAddPart()) {
        return b.newTemp(
          Jimple.v().newVirtualInvokeExpr(v,
            Scene.v().getMethod("<java.lang.StringBuffer: java.lang.String toString()>").makeRef()
        ));
      }
      else
        return v;
    }
    else 
    return soot.jimple.Jimple.v().newAddExpr(
      b.newTemp(
        getLeftOperand().type().emitCastTo(b,  // Binary numeric promotion
          getLeftOperand(),
          type()
        )
      ),
      asImmediate(b,
        getRightOperand().type().emitCastTo(b, // Binary numeric promotion
          getRightOperand(),
          type()
        )
      )
    );
  }

  // See BooleanExpressions.jrag for the evaluation of conditionals

  public soot.Value InstanceOfExpr.eval(Body b) {
    return Jimple.v().newInstanceOfExpr(
      asImmediate(b, getExpr().eval(b)),
      getTypeAccess().type().getSootType()
    );
  }


  public soot.Value ClassAccess.eval(Body b) {
    if(prevExpr().type().isPrimitiveType() || prevExpr().type().isVoid()) {
      TypeDecl typeDecl = lookupType("java.lang", prevExpr().type().primitiveClassName());
      SimpleSet c = typeDecl.memberFields("TYPE");
      FieldDeclaration f = (FieldDeclaration)c.iterator().next();
      return Jimple.v().newStaticFieldRef(f.sootRef());
    }
    else {
      FieldDeclaration f = hostType().topLevelType().createStaticClassField(prevExpr().type().referenceClassFieldName());
      // add method to perform lookup as a side-effect
      MethodDecl m = hostType().topLevelType().createStaticClassMethod();

      soot.jimple.Stmt next_label = b.newLabel();
      soot.jimple.Stmt end_label = b.newLabel();
      Local result = b.newTemp(type().getSootType());
      Local ref = asLocal(b, Jimple.v().newStaticFieldRef(f.sootRef()));
      b.setLine(this);
      b.add(
        Jimple.v().newIfStmt(
          Jimple.v().newNeExpr(ref, soot.jimple.NullConstant.v()),
          next_label
        )
      );
      // emit string literal
        
      ArrayList list = new ArrayList();
      list.add(new StringLiteral(prevExpr().type().jvmName()).eval(b));
      Local l = asLocal(b, Jimple.v().newStaticInvokeExpr(m.sootRef(), list));
      b.setLine(this);
      b.add(Jimple.v().newAssignStmt(
        Jimple.v().newStaticFieldRef(f.sootRef()),
        l
      ));
      b.setLine(this);
      b.add(Jimple.v().newAssignStmt(result, l));
      b.add(Jimple.v().newGotoStmt(end_label));
      b.addLabel(next_label);
      b.add(Jimple.v().newAssignStmt(
        result,
        Jimple.v().newStaticFieldRef(f.sootRef())
      ));
      b.addLabel(end_label);
      return result;
    }
  }





}
