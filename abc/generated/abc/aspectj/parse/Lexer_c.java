/* The following code was generated by JFlex 1.4 on 4/03/10 18:45 */

/* abc - The AspectBench Compiler
 * Copyright (C) 2004 Polyglot project group
 * Copyright (C) 2004 Laurie Hendren
 * Copyright (C) 2004 Pavel Avgustinov
 *
 * This compiler is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This compiler is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

/* Java 1.4 scanner for JFlex.
 * Based on JLS, 2ed, Chapter 3.
 * Adapted for abc Pavel Avgustinov <pavel.avgustinov@magd.ox.ac.uk>, August 2004.
 */

package abc.aspectj.parse;

import java_cup.runtime.Symbol;
import polyglot.lex.*;
import polyglot.util.Position;
import polyglot.util.ErrorQueue;
import polyglot.util.ErrorInfo;
import java.util.HashMap;
import java.util.Stack;
import polyglot.ext.jl.parse.*;
import java.math.BigInteger;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4
 * on 4/03/10 18:45 from the specification file
 * <tt>src/abc/aspectj/parse/aspectj.flex</tt>
 */
public class Lexer_c implements AbcLexer, polyglot.lex.Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int POINTCUT = 7;
  public static final int STRING = 5;
  public static final int ASPECTJ = 3;
  public static final int NONNESTABLECOMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int CHARACTER = 6;
  public static final int POINTCUTIFEXPR = 4;
  public static final int NESTABLECOMMENT = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\6\1\3\1\1\1\0\1\3\1\2\16\6\4\0\1\3\1\46"+
    "\1\60\1\0\1\5\1\56\1\52\1\57\1\33\1\34\1\7\1\54"+
    "\1\42\1\17\1\15\1\4\1\10\3\21\4\14\2\11\1\51\1\41"+
    "\1\45\1\43\1\44\1\50\1\0\3\13\1\63\1\16\1\62\5\5"+
    "\1\61\13\5\1\12\2\5\1\37\1\20\1\40\1\55\1\66\1\0"+
    "\1\27\1\74\1\70\1\63\1\25\1\26\2\5\1\72\1\64\1\5"+
    "\1\30\1\5\1\32\1\71\1\67\1\5\1\23\1\31\1\22\1\24"+
    "\1\65\1\5\1\73\2\5\1\35\1\53\1\36\1\47\41\6\2\0"+
    "\4\5\4\0\1\5\2\0\1\6\7\0\1\5\4\0\1\5\5\0"+
    "\27\5\1\0\37\5\1\0\u013f\5\31\0\162\5\4\0\14\5\16\0"+
    "\5\5\11\0\1\5\21\0\130\6\5\0\23\6\12\0\1\5\13\0"+
    "\1\5\1\0\3\5\1\0\1\5\1\0\24\5\1\0\54\5\1\0"+
    "\46\5\1\0\5\5\4\0\202\5\1\0\4\6\3\0\105\5\1\0"+
    "\46\5\2\0\2\5\6\0\20\5\41\0\46\5\2\0\1\5\7\0"+
    "\47\5\11\0\21\6\1\0\27\6\1\0\3\6\1\0\1\6\1\0"+
    "\2\6\1\0\1\6\13\0\33\5\5\0\3\5\15\0\4\6\14\0"+
    "\6\6\13\0\32\5\5\0\13\5\16\6\7\0\12\6\4\0\2\5"+
    "\1\6\143\5\1\0\1\5\10\6\1\0\6\6\2\5\2\6\1\0"+
    "\4\6\2\5\12\6\3\5\2\0\1\5\17\0\1\6\1\5\1\6"+
    "\36\5\33\6\2\0\3\5\60\0\46\5\13\6\1\5\u014f\0\3\6"+
    "\66\5\2\0\1\6\1\5\20\6\2\0\1\5\4\6\3\0\12\5"+
    "\2\6\2\0\12\6\21\0\3\6\1\0\10\5\2\0\2\5\2\0"+
    "\26\5\1\0\7\5\1\0\1\5\3\0\4\5\2\0\1\6\1\5"+
    "\7\6\2\0\2\6\2\0\3\6\11\0\1\6\4\0\2\5\1\0"+
    "\3\5\2\6\2\0\12\6\4\5\15\0\3\6\1\0\6\5\4\0"+
    "\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0\2\5\1\0"+
    "\2\5\2\0\1\6\1\0\5\6\4\0\2\6\2\0\3\6\13\0"+
    "\4\5\1\0\1\5\7\0\14\6\3\5\14\0\3\6\1\0\11\5"+
    "\1\0\3\5\1\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5"+
    "\2\0\1\6\1\5\10\6\1\0\3\6\1\0\3\6\2\0\1\5"+
    "\17\0\2\5\2\6\2\0\12\6\1\0\1\5\17\0\3\6\1\0"+
    "\10\5\2\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0"+
    "\5\5\2\0\1\6\1\5\6\6\3\0\2\6\2\0\3\6\10\0"+
    "\2\6\4\0\2\5\1\0\3\5\4\0\12\6\1\0\1\5\20\0"+
    "\1\6\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5"+
    "\1\0\1\5\1\0\2\5\3\0\2\5\3\0\3\5\3\0\10\5"+
    "\1\0\3\5\4\0\5\6\3\0\3\6\1\0\4\6\11\0\1\6"+
    "\17\0\11\6\11\0\1\5\7\0\3\6\1\0\10\5\1\0\3\5"+
    "\1\0\27\5\1\0\12\5\1\0\5\5\4\0\7\6\1\0\3\6"+
    "\1\0\4\6\7\0\2\6\11\0\2\5\4\0\12\6\22\0\2\6"+
    "\1\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5\1\0\5\5"+
    "\2\0\1\6\1\5\7\6\1\0\3\6\1\0\4\6\7\0\2\6"+
    "\7\0\1\5\1\0\2\5\4\0\12\6\22\0\2\6\1\0\10\5"+
    "\1\0\3\5\1\0\27\5\1\0\20\5\4\0\6\6\2\0\3\6"+
    "\1\0\4\6\11\0\1\6\10\0\2\5\4\0\12\6\22\0\2\6"+
    "\1\0\22\5\3\0\30\5\1\0\11\5\1\0\1\5\2\0\7\5"+
    "\3\0\1\6\4\0\6\6\1\0\1\6\1\0\10\6\22\0\2\6"+
    "\15\0\60\5\1\6\2\5\7\6\4\0\10\5\10\6\1\0\12\6"+
    "\47\0\2\5\1\0\1\5\2\0\2\5\1\0\1\5\2\0\1\5"+
    "\6\0\4\5\1\0\7\5\1\0\3\5\1\0\1\5\1\0\1\5"+
    "\2\0\2\5\1\0\4\5\1\6\2\5\6\6\1\0\2\6\1\5"+
    "\2\0\5\5\1\0\1\5\1\0\6\6\2\0\12\6\2\0\2\5"+
    "\42\0\1\5\27\0\2\6\6\0\12\6\13\0\1\6\1\0\1\6"+
    "\1\0\1\6\4\0\2\6\10\5\1\0\42\5\6\0\24\6\1\0"+
    "\2\6\4\5\4\0\10\6\1\0\44\6\11\0\1\6\71\0\42\5"+
    "\1\0\5\5\1\0\2\5\1\0\7\6\3\0\4\6\6\0\12\6"+
    "\6\0\6\5\4\6\106\0\46\5\12\0\51\5\7\0\132\5\5\0"+
    "\104\5\5\0\122\5\6\0\7\5\1\0\77\5\1\0\1\5\1\0"+
    "\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\47\5\1\0"+
    "\1\5\1\0\4\5\2\0\37\5\1\0\1\5\1\0\4\5\2\0"+
    "\7\5\1\0\1\5\1\0\4\5\2\0\7\5\1\0\7\5\1\0"+
    "\27\5\1\0\37\5\1\0\1\5\1\0\4\5\2\0\7\5\1\0"+
    "\47\5\1\0\23\5\16\0\11\6\56\0\125\5\14\0\u026c\5\2\0"+
    "\10\5\12\0\32\5\5\0\113\5\3\0\3\5\17\0\15\5\1\0"+
    "\4\5\3\6\13\0\22\5\3\6\13\0\22\5\2\6\14\0\15\5"+
    "\1\0\3\5\1\0\2\6\14\0\64\5\40\6\3\0\1\5\3\0"+
    "\2\5\1\6\2\0\12\6\41\0\3\6\2\0\12\6\6\0\130\5"+
    "\10\0\51\5\1\6\126\0\35\5\3\0\14\6\4\0\14\6\12\0"+
    "\12\6\36\5\2\0\5\5\u038b\0\154\5\224\0\234\5\4\0\132\5"+
    "\6\0\26\5\2\0\6\5\2\0\46\5\2\0\6\5\2\0\10\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\37\5\2\0\65\5"+
    "\1\0\7\5\1\0\1\5\3\0\3\5\1\0\7\5\3\0\4\5"+
    "\2\0\6\5\4\0\15\5\5\0\3\5\1\0\7\5\17\0\4\6"+
    "\32\0\5\6\20\0\2\5\23\0\1\5\13\0\4\6\6\0\6\6"+
    "\1\0\1\5\15\0\1\5\40\0\22\5\36\0\15\6\4\0\1\6"+
    "\3\0\6\6\27\0\1\5\4\0\1\5\2\0\12\5\1\0\1\5"+
    "\3\0\5\5\6\0\1\5\1\0\1\5\1\0\1\5\1\0\4\5"+
    "\1\0\3\5\1\0\7\5\3\0\3\5\5\0\5\5\26\0\44\5"+
    "\u0e81\0\3\5\31\0\11\5\6\6\1\0\5\5\2\0\5\5\4\0"+
    "\126\5\2\0\2\6\2\0\3\5\1\0\137\5\5\0\50\5\4\0"+
    "\136\5\21\0\30\5\70\0\20\5\u0200\0\u19b6\5\112\0\u51a6\5\132\0"+
    "\u048d\5\u0773\0\u2ba4\5\u215c\0\u012e\5\2\0\73\5\225\0\7\5\14\0"+
    "\5\5\5\0\1\5\1\6\12\5\1\0\15\5\1\0\5\5\1\0"+
    "\1\5\1\0\2\5\1\0\2\5\1\0\154\5\41\0\u016b\5\22\0"+
    "\100\5\2\0\66\5\50\0\15\5\3\0\20\6\20\0\4\6\17\0"+
    "\2\5\30\0\3\5\31\0\1\5\6\0\5\5\1\0\207\5\2\0"+
    "\1\6\4\0\1\5\13\0\12\6\7\0\32\5\4\0\1\5\1\0"+
    "\32\5\12\0\132\5\3\0\6\5\2\0\6\5\2\0\6\5\2\0"+
    "\3\5\3\0\2\5\3\0\2\5\22\0\3\6\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\2\2\1\3\1\4\1\5\2\6\1\7"+
    "\1\10\3\4\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\4\3\2\2\4\1\37\2\40\1\1\1\41\1\37"+
    "\2\42\1\1\1\43\1\1\1\4\1\44\1\7\3\4"+
    "\1\45\1\46\1\47\1\50\2\1\1\51\1\2\1\52"+
    "\1\53\1\54\1\55\1\56\2\0\1\57\1\0\1\60"+
    "\1\61\1\62\1\63\1\64\3\4\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\4\1\103\1\104\1\105\2\4"+
    "\1\106\2\107\1\110\1\111\1\112\1\113\1\114\1\115"+
    "\1\116\1\117\1\120\1\121\1\122\1\123\1\124\1\125"+
    "\1\126\1\127\1\130\1\131\3\4\1\132\1\133\1\134"+
    "\1\135\1\57\1\0\3\4\1\136\1\137\1\140\3\4"+
    "\1\107\3\4\1\141\1\142\1\4\1\143\1\144\3\4"+
    "\1\142\1\4\1\143\1\145\3\4\1\145\11\4\1\146"+
    "\4\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[184];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356"+
    "\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u01e8\0\u01e8\0\u01e8"+
    "\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u04c4\0\u0501\0\u053e"+
    "\0\u057b\0\u01e8\0\u01e8\0\u01e8\0\u05b8\0\u05f5\0\u0632\0\u066f"+
    "\0\u06ac\0\u01e8\0\u01e8\0\u06e9\0\u0726\0\u0763\0\u07a0\0\u07dd"+
    "\0\u081a\0\u0857\0\u01e8\0\u0894\0\u08d1\0\u01e8\0\u090e\0\u01e8"+
    "\0\u094b\0\u0988\0\u01e8\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9"+
    "\0\u0af6\0\u0b33\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u0b70\0\u0bad"+
    "\0\u01e8\0\u0bea\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u0c27\0\u0c64"+
    "\0\u0ca1\0\u0cde\0\u0d1b\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u01e8"+
    "\0\u0d58\0\u0d95\0\u0dd2\0\u01e8\0\u01e8\0\u0e0f\0\u01e8\0\u0e4c"+
    "\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u01e8"+
    "\0\u01e8\0\u0e89\0\u01e8\0\u01e8\0\u01e8\0\u0ec6\0\u0f03\0\u01e8"+
    "\0\u0f40\0\u0f7d\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u01e8"+
    "\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u01e8"+
    "\0\u01e8\0\u01e8\0\u0fba\0\u01e8\0\u0ff7\0\u1034\0\u1071\0\u01e8"+
    "\0\u01e8\0\u01e8\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df"+
    "\0\u01e8\0\u121c\0\u01e8\0\u1259\0\u1296\0\u12d3\0\u01e8\0\u1310"+
    "\0\u134d\0\u138a\0\u01e8\0\u029f\0\u13c7\0\u029f\0\u01e8\0\u1404"+
    "\0\u1441\0\u147e\0\u0a02\0\u14bb\0\u0a02\0\u029f\0\u14f8\0\u1535"+
    "\0\u1572\0\u0a02\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0"+
    "\0\u171d\0\u175a\0\u1797\0\u029f\0\u17d4\0\u1811\0\u184e\0\u188b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[184];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\12\1\14\1\15\1\11\1\16"+
    "\1\17\1\20\2\15\1\20\1\21\1\15\1\22\1\11"+
    "\1\20\1\23\3\15\1\24\3\15\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\3\15\1\54\10\15\4\12"+
    "\1\55\2\12\1\56\74\12\1\57\65\12\1\11\1\12"+
    "\1\13\1\12\1\14\1\15\1\11\1\16\1\17\1\20"+
    "\2\15\1\20\1\21\1\15\1\22\1\11\1\20\1\23"+
    "\3\15\1\24\1\60\2\15\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\14\15\1\11\1\12\1\13\1\12"+
    "\1\14\1\15\1\11\1\16\1\17\1\20\2\15\1\20"+
    "\1\21\1\15\1\22\1\11\1\20\1\23\3\15\1\24"+
    "\3\15\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\6\15\1\61\5\15\1\62\1\63\1\64\15\62\1\65"+
    "\37\62\1\66\14\62\1\67\1\70\1\71\15\67\1\72"+
    "\36\67\1\73\15\67\1\11\1\12\1\13\1\12\1\74"+
    "\1\75\1\11\1\76\2\11\2\75\1\11\1\77\1\75"+
    "\3\11\1\100\3\75\1\101\3\75\1\102\1\26\1\103"+
    "\1\104\1\11\1\32\1\33\1\105\1\35\3\11\1\106"+
    "\2\11\1\44\1\107\1\110\1\111\3\11\1\53\14\75"+
    "\76\0\1\12\77\0\1\112\2\0\1\113\33\0\1\114"+
    "\36\0\2\15\1\0\5\15\1\0\1\15\2\0\12\15"+
    "\26\0\14\15\4\0\1\115\36\0\1\116\41\0\1\117"+
    "\1\120\1\121\1\0\1\117\1\122\1\123\2\0\1\117"+
    "\3\0\1\123\1\124\1\0\1\125\30\0\1\125\1\124"+
    "\1\126\7\0\1\121\11\0\2\20\2\0\1\20\1\122"+
    "\1\123\2\0\1\20\3\0\1\123\1\124\1\0\1\125"+
    "\30\0\1\125\1\124\1\126\21\0\2\122\2\0\1\122"+
    "\4\0\1\122\72\0\1\127\23\0\1\130\36\0\2\15"+
    "\1\0\5\15\1\0\1\15\2\0\2\15\1\131\7\15"+
    "\26\0\14\15\5\0\2\15\1\0\5\15\1\0\1\15"+
    "\2\0\6\15\1\132\3\15\26\0\14\15\5\0\2\15"+
    "\1\0\5\15\1\0\1\15\2\0\3\15\1\133\6\15"+
    "\26\0\14\15\43\0\1\134\74\0\1\135\1\136\73\0"+
    "\1\137\1\0\1\140\72\0\1\141\74\0\1\142\6\0"+
    "\1\143\65\0\1\144\7\0\1\145\64\0\1\146\10\0"+
    "\1\147\63\0\1\150\74\0\1\151\36\0\2\15\1\0"+
    "\5\15\1\0\1\15\2\0\6\15\1\152\3\15\26\0"+
    "\14\15\7\0\1\153\71\0\1\154\74\0\1\155\75\0"+
    "\2\15\1\0\5\15\1\0\1\15\2\0\10\15\1\156"+
    "\1\15\26\0\14\15\5\0\2\15\1\0\5\15\1\0"+
    "\1\15\2\0\12\15\26\0\10\15\1\157\3\15\1\62"+
    "\2\0\15\62\1\0\37\62\1\0\14\62\1\0\1\63"+
    "\73\0\1\160\1\0\6\160\1\161\3\160\1\162\3\160"+
    "\1\163\1\161\1\164\1\165\2\160\1\166\3\160\1\167"+
    "\24\160\1\170\1\171\13\160\1\172\1\67\2\0\15\67"+
    "\1\0\36\67\1\0\15\67\1\0\1\70\73\0\1\160"+
    "\1\0\6\160\1\161\3\160\1\162\3\160\1\173\1\161"+
    "\1\174\1\175\2\160\1\176\3\160\1\177\24\160\1\200"+
    "\1\201\13\160\1\202\4\0\1\112\2\0\1\113\72\0"+
    "\2\75\1\203\5\75\1\0\1\75\2\0\12\75\26\0"+
    "\14\75\4\0\1\115\10\203\1\0\1\203\2\0\12\203"+
    "\26\0\14\203\15\0\1\204\64\0\2\75\1\203\5\75"+
    "\1\0\1\75\2\0\2\75\1\205\7\75\26\0\14\75"+
    "\5\0\2\75\1\203\5\75\1\0\1\75\2\0\6\75"+
    "\1\206\3\75\26\0\14\75\5\0\2\75\1\203\5\75"+
    "\1\0\1\75\2\0\3\75\1\207\6\75\26\0\14\75"+
    "\52\0\1\210\75\0\1\211\21\0\1\112\2\0\72\112"+
    "\10\0\1\117\1\120\2\0\1\117\1\122\1\123\2\0"+
    "\1\117\3\0\1\123\2\0\1\212\30\0\1\212\23\0"+
    "\2\120\2\0\1\120\1\122\1\123\2\0\1\120\3\0"+
    "\1\123\57\0\2\213\1\0\2\213\1\0\1\213\2\0"+
    "\1\213\3\0\3\213\32\0\2\213\4\0\1\213\3\0"+
    "\1\213\10\0\2\122\2\0\1\122\1\0\1\123\2\0"+
    "\1\122\3\0\1\123\1\124\33\0\1\124\1\126\21\0"+
    "\2\214\2\0\1\214\2\0\1\215\1\0\1\214\32\0"+
    "\1\215\25\0\2\15\1\0\5\15\1\0\1\15\2\0"+
    "\3\15\1\216\6\15\26\0\14\15\5\0\2\15\1\0"+
    "\5\15\1\0\1\15\2\0\7\15\1\217\2\15\26\0"+
    "\14\15\5\0\2\15\1\0\5\15\1\0\1\15\2\0"+
    "\7\15\1\220\2\15\26\0\14\15\43\0\1\221\1\222"+
    "\73\0\1\223\36\0\2\15\1\0\5\15\1\0\1\15"+
    "\2\0\12\15\26\0\4\15\1\224\7\15\5\0\2\15"+
    "\1\0\5\15\1\0\1\15\2\0\12\15\26\0\6\15"+
    "\1\225\5\15\5\0\2\15\1\0\5\15\1\0\1\15"+
    "\2\0\12\15\26\0\11\15\1\226\2\15\10\0\1\162"+
    "\3\0\1\162\4\0\1\162\63\0\1\227\3\0\1\227"+
    "\4\0\1\227\60\0\10\203\1\0\1\203\2\0\12\203"+
    "\26\0\14\203\5\0\2\75\1\203\5\75\1\0\1\75"+
    "\2\0\3\75\1\230\6\75\26\0\14\75\5\0\2\75"+
    "\1\203\5\75\1\0\1\75\2\0\7\75\1\231\2\75"+
    "\26\0\14\75\5\0\2\75\1\203\5\75\1\0\1\75"+
    "\2\0\7\75\1\232\2\75\26\0\14\75\10\0\2\213"+
    "\1\0\2\213\1\0\1\213\2\0\1\213\3\0\3\213"+
    "\1\233\30\0\1\233\2\213\4\0\1\213\3\0\1\213"+
    "\10\0\2\214\2\0\1\214\4\0\1\214\4\0\1\124"+
    "\33\0\1\124\1\126\21\0\2\214\2\0\1\214\4\0"+
    "\1\214\60\0\2\15\1\0\5\15\1\0\1\15\2\0"+
    "\4\15\1\234\5\15\26\0\14\15\5\0\2\15\1\0"+
    "\5\15\1\0\1\15\2\0\10\15\1\235\1\15\26\0"+
    "\14\15\5\0\2\15\1\0\5\15\1\0\1\15\2\0"+
    "\7\15\1\236\2\15\26\0\14\15\43\0\1\237\36\0"+
    "\2\15\1\0\5\15\1\0\1\15\2\0\6\15\1\240"+
    "\3\15\26\0\14\15\5\0\2\15\1\0\5\15\1\0"+
    "\1\15\2\0\4\15\1\241\5\15\26\0\14\15\5\0"+
    "\2\15\1\0\5\15\1\0\1\15\2\0\11\15\1\242"+
    "\26\0\14\15\5\0\2\75\1\203\5\75\1\0\1\75"+
    "\2\0\4\75\1\243\5\75\26\0\14\75\5\0\2\75"+
    "\1\203\5\75\1\0\1\75\2\0\10\75\1\244\1\75"+
    "\26\0\14\75\5\0\2\75\1\203\5\75\1\0\1\75"+
    "\2\0\7\75\1\245\2\75\26\0\14\75\5\0\2\15"+
    "\1\0\5\15\1\0\1\15\2\0\4\15\1\246\5\15"+
    "\26\0\14\15\5\0\2\15\1\0\5\15\1\0\1\15"+
    "\2\0\12\15\26\0\5\15\1\247\6\15\5\0\2\15"+
    "\1\0\5\15\1\0\1\15\2\0\12\15\26\0\7\15"+
    "\1\250\4\15\5\0\2\15\1\0\5\15\1\0\1\15"+
    "\2\0\1\15\1\251\10\15\26\0\14\15\5\0\2\75"+
    "\1\203\5\75\1\0\1\75\2\0\4\75\1\252\5\75"+
    "\26\0\14\75\5\0\2\15\1\0\5\15\1\0\1\15"+
    "\2\0\10\15\1\253\1\15\26\0\14\15\5\0\2\15"+
    "\1\0\5\15\1\0\1\15\2\0\1\15\1\254\10\15"+
    "\26\0\14\15\5\0\2\15\1\0\5\15\1\0\1\15"+
    "\2\0\12\15\26\0\7\15\1\255\4\15\5\0\2\15"+
    "\1\0\5\15\1\0\1\15\2\0\1\15\1\256\10\15"+
    "\26\0\14\15\5\0\2\15\1\0\5\15\1\0\1\15"+
    "\2\0\12\15\26\0\3\15\1\240\10\15\5\0\2\15"+
    "\1\0\5\15\1\0\1\15\2\0\3\15\1\257\6\15"+
    "\26\0\14\15\5\0\2\15\1\0\5\15\1\0\1\15"+
    "\2\0\6\15\1\260\3\15\26\0\14\15\5\0\2\15"+
    "\1\0\5\15\1\0\1\15\2\0\1\15\1\261\10\15"+
    "\26\0\14\15\5\0\2\15\1\0\5\15\1\0\1\15"+
    "\2\0\1\15\1\262\10\15\26\0\14\15\5\0\2\15"+
    "\1\0\5\15\1\0\1\15\2\0\12\15\26\0\11\15"+
    "\1\263\2\15\5\0\2\15\1\0\5\15\1\0\1\15"+
    "\2\0\4\15\1\264\5\15\26\0\14\15\5\0\2\15"+
    "\1\0\5\15\1\0\1\15\2\0\5\15\1\265\4\15"+
    "\26\0\14\15\5\0\2\15\1\0\5\15\1\0\1\15"+
    "\2\0\4\15\1\266\5\15\26\0\14\15\5\0\2\15"+
    "\1\0\5\15\1\0\1\15\2\0\12\15\26\0\12\15"+
    "\1\267\1\15\5\0\2\15\1\0\5\15\1\0\1\15"+
    "\2\0\12\15\26\0\6\15\1\270\5\15\5\0\2\15"+
    "\1\0\5\15\1\0\1\15\2\0\2\15\1\240\7\15"+
    "\26\0\14\15";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6344];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\2\11\13\1\10\11\4\1\3\11\5\1\2\11"+
    "\7\1\1\11\2\1\1\11\1\1\1\11\2\1\1\11"+
    "\7\1\4\11\2\1\1\11\1\1\4\11\1\1\2\0"+
    "\1\1\1\0\5\11\3\1\2\11\1\1\1\11\1\1"+
    "\11\11\1\1\3\11\2\1\1\11\2\1\20\11\1\1"+
    "\1\11\3\1\3\11\2\1\1\0\3\1\1\11\1\1"+
    "\1\11\3\1\1\11\3\1\1\11\3\1\1\11\31\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[184];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */

/* -------------------------- added for AspectJ ---------------------- */

    /* Counters added to get out of scanning states for AspectJ */
    private static int curlyBraceLevel = 0; // nesting of {}
    private static int parenLevel = 0; // nesting of ()
    private static boolean inPerPointcut = false; // currently in a per pointcut 
    private static boolean reportedUnclosedComment = false; 
    private static boolean inComment = false;

	/* Any change of lexer state should be done using this method rather than yybegin() - it
		keeps track of the necessary information on the stack. */
	public void enterLexerState(int state) {
		nestingStack.push(new NestingState(curlyBraceLevel, parenLevel, yystate()));
		// System.out.println("Pushing state [" + curlyBraceLevel+ ", " + parenLevel + ", " + yystate() + "] onto stack and switching to " + state + " after token '" + yytext() + "'.");
		yybegin(state);
	}
	
	/* Any change of lexer state to an enclosing state should be done using this method, as it
		pops the necessary information from the stack. */
	public void returnToPrevState() {
		if(nestingStack.isEmpty()) throw new polyglot.util.InternalCompilerError("Stack underflow while lexing.");
		NestingState ns = (NestingState)nestingStack.pop();
		// System.out.println("Popped state " + ns + " from stack and switching away from " + yystate() + " after token '" + yytext() + "'.");
		yybegin(ns.state);
	}

    /* Need a nestingStack to keep track of the nesting of lexer states.

       Each time new state is entered, a stackState
       of (curlyBraceLevel,parenLevel,yystate()) is pushed and then current
       state becomes the state in question.

       Each time a LEFTBRACE is reached,  the curlyBraceLevel is incremented.

       Each time a RIGHTBRACE is reached, the curlyBraceLevel is decremented,
       and the new curlyBraceLevel is checked against the level stored on
       top of the nestingStack for the lexer states that are terminated by a curly
       brace, i.e. YYINITIAL and AspectJ.   If the levels are equal, then we are
       exiting a class, interface or aspect declaration, and so we pop
       the top state and put the scanner in that state.
       
       Each time a LEFTPAREN is reached, the parenLevel is incremented.
       
       Each time a RIGHTPAREN is reached, the parenLevel is decremented, and
       the new parenLevel is checked against the level stored on the top of the
       nestingStack for the lexer states that are terminated by a round parenthesis,
       i.e. POINTCUT and POINTCUTIFEXPR. If the levels are equal, pop the top state
       and return to it.
       
       A 'declare' POINTCUT state pops the preceding state from the stack when it 
       encounters a ';'.
       
       The lexer states for comments, string and char literals are responsible for
       popping the relevant lexer state off the stack themselves, when they encounter
       the closing token.
     */

    private static Stack nestingStack = new Stack();

    class NestingState {
         int nestingLevel;  /* current nesting level of { }, should be >= 0 */
         int parenLevel;    /* Same for the nesting of ( ), should be >= 0 */
         int state;  /* should be one of the lexer states */

         NestingState(int l, int p, int s)
           { nestingLevel=l;
           	 parenLevel = p;
             state = s;
           }
         
         public String toString() {
         	return "BraceLevel: " + nestingLevel + ", ParenLevel: " + parenLevel + ", state: " + state;
         }
     }

      public static void reset() {
    	curlyBraceLevel = 0;
    	parenLevel = 0;
    	inPerPointcut = false;
    	reportedUnclosedComment = false;
    	inComment = false;
    	// currentState = YYINITIAL; // PA: I'm not sure where this actually alters anything.
    				// Really it should be yybegin(YYINITIAL), but that can't be called from
    				// a static context...
    	nestingStack = new Stack();
    }

/* ------------------------------------------------------------------- */

    StringBuffer sb = new StringBuffer();
    String file;
    ErrorQueue eq;
    HashMap javaKeywords, pointcutKeywords, aspectJKeywords, pointcutIfExprKeywords;
    boolean lastTokenWasDot;

	public void addJavaKeyword(String keyword, LexerAction la) {
		javaKeywords.put(keyword, la);
	}
	
	public void addAspectJKeyword(String keyword, LexerAction la) {
		aspectJKeywords.put(keyword, la);
	}
	
	public void addPointcutKeyword(String keyword, LexerAction la) {
		pointcutKeywords.put(keyword, la);
	}
	
	public void addPointcutIfExprKeyword(String keyword, LexerAction la) {
		pointcutIfExprKeywords.put(keyword, la);
	}
	
	public void addGlobalKeyword(String keyword, LexerAction la) {
		addJavaKeyword(keyword, la);
		addAspectJKeyword(keyword, la);
		addPointcutKeyword(keyword, la);
		addPointcutIfExprKeyword(keyword, la);
	}
	
	public void addAspectJContextKeyword(String keyword, LexerAction la) {
		addAspectJKeyword(keyword, la);
		addPointcutIfExprKeyword(keyword, la);
	}

    public Lexer_c(java.io.InputStream in, String file, ErrorQueue eq) {
        this(new java.io.BufferedReader(new java.io.InputStreamReader(in)),
             file, eq);
    }
    
    public Lexer_c(java.io.Reader reader, String file, ErrorQueue eq) {
        this(new EscapedUnicodeReader(reader));
        this.file = file;
        this.eq = eq;
        this.javaKeywords = new HashMap();
        this.pointcutKeywords = new HashMap();
        this.aspectJKeywords = new HashMap();
        this.pointcutIfExprKeywords = new HashMap();
        abc.main.Main.v().getAbcExtension().initLexerKeywords(this);
    }

	// These methods should be used to access the values of the state constants,
	// which could be required when constructing LexerAction objects.
	public int java_state() { return YYINITIAL; }
	public int aspectj_state() { return ASPECTJ; }
	public int pointcut_state() { return POINTCUT; }
	public int pointcutifexpr_state() { return POINTCUTIFEXPR; }

	public void setInPerPointcut(boolean b) {
		inPerPointcut = b;
	}
	
	public int currentState() {
		return yystate();
	}
	
	public boolean getLastTokenWasDot() {
		return lastTokenWasDot;
	}
	
    public String file() {
        return file;
    }

    private Position pos() {
        return new Position(file, yyline+1, yycolumn, yyline+1, yycolumn+yytext().length());
    }
    private Position pos(int len) {
        return new Position(file, yyline+1, yycolumn-len-1, yyline+1, yycolumn+1);
    }

    private Token key(int symbol) {
        lastTokenWasDot = false;
        return new Keyword(pos(), yytext(), symbol);
    }

    private Token op(int symbol) {
        lastTokenWasDot = (symbol == sym.DOT);
        return new Operator(pos(), yytext(), symbol);
    }

    private Token id() {
        lastTokenWasDot = false;
        return new Identifier(pos(), yytext(), sym.IDENTIFIER);
    }

    /* ---- added for id patterns, needed in Pointcuts  --- */
    private Token id_pattern() {
	//System.out.println("ID pattern: " + yytext());
        lastTokenWasDot = false;
        return new Identifier(pos(), yytext(), sym.IDENTIFIERPATTERN);
    }

    private Token int_lit(String s, int radix) {
        lastTokenWasDot = false;
	    BigInteger x = new BigInteger(s, radix);
	    boolean boundary = (radix == 10 && s.equals("2147483648"));
	    int bits = (radix == 10 ? 31 : 32);
	    if (x.bitLength() > bits && !boundary) { 
			eq.enqueue(ErrorInfo.LEXICAL_ERROR, "Integer literal \"" +
			   yytext() + "\" out of range.", pos());
	    }
	    return new IntegerLiteral(pos(), x.intValue(), 
	    		boundary? sym.INTEGER_LITERAL_BD : sym.INTEGER_LITERAL);
    }

    private Token long_lit(String s, int radix) {
        lastTokenWasDot = false;
	    BigInteger x = new BigInteger(s, radix);
	    boolean boundary = (radix == 10 && s.equals("9223372036854775808"));
        int bits = (radix == 10 ? 63 : 64);
	    if (x.bitLength() > bits && !boundary) {
			eq.enqueue(ErrorInfo.LEXICAL_ERROR, "Long literal \"" +
			   yytext() + "\" out of range.", pos());
			return new LongLiteral(pos(), x.longValue(), sym.LONG_LITERAL); // null;
	    }
	    return new LongLiteral(pos(), x.longValue(), 
	    		boundary? sym.LONG_LITERAL_BD : sym.LONG_LITERAL);
    }

    private Token float_lit(String s) {
        lastTokenWasDot = false;
        try {
            Float x = Float.valueOf(s);
		    boolean zero = true;
		    for (int i = 0; i < s.length(); i++) {
				if ('1' <= s.charAt(i) && s.charAt(i) <= '9') {
				    zero = false;
				    break;
				}
				else if(s.charAt(i) == 'e' || s.charAt(i) == 'E') {
					break; // 0e19 is still 0
				}
		    }
		    if (x.isInfinite() || x.isNaN() || (x.floatValue() == 0 && ! zero)) {
				eq.enqueue(ErrorInfo.LEXICAL_ERROR,
				   "Illegal float literal \"" + yytext() + "\"", pos());
				return new FloatLiteral(pos(), 0, sym.FLOAT_LITERAL); // null;
		    }
            return new FloatLiteral(pos(), x.floatValue(), sym.FLOAT_LITERAL);
        }
        catch (NumberFormatException e) {
            eq.enqueue(ErrorInfo.LEXICAL_ERROR,
                       "Illegal float literal \"" + yytext() + "\"", pos());
            return new FloatLiteral(pos(), 0, sym.FLOAT_LITERAL); // null;
        }
    }

    private Token double_lit(String s) {
        lastTokenWasDot = false;
        try {
            Double x = Double.valueOf(s);
		    boolean zero = true;
		    for (int i = 0; i < s.length(); i++) {
				if ('1' <= s.charAt(i) && s.charAt(i) <= '9') {
				    zero = false;
				    break;
				}
				else if(s.charAt(i) == 'e' || s.charAt(i) == 'E') {
					break; // 0e19 is still 0
				}
		    }
		    if (x.isInfinite() || x.isNaN() || (x.doubleValue() == 0 && ! zero)) {
				eq.enqueue(ErrorInfo.LEXICAL_ERROR,
				   "Illegal double literal \"" + yytext() + "\"", pos());
				return new DoubleLiteral(pos(), 0, sym.DOUBLE_LITERAL); // null;
		    }
            return new DoubleLiteral(pos(), x.doubleValue(), sym.DOUBLE_LITERAL);
        }
        catch (NumberFormatException e) {
            eq.enqueue(ErrorInfo.LEXICAL_ERROR,
                       "Illegal double literal \"" + yytext() + "\"", pos());
            return new DoubleLiteral(pos(), 0, sym.DOUBLE_LITERAL); // null;
        }
    }

    private Token char_lit(String s) {
        lastTokenWasDot = false;
        if (s.length() == 1) {
            char x = s.charAt(0);
            return new CharacterLiteral(pos(), x, sym.CHARACTER_LITERAL);
        }
        else {
            eq.enqueue(ErrorInfo.LEXICAL_ERROR,
                       "Illegal character literal \'" + s + "\'", pos(s.length()));
            return new CharacterLiteral(pos(), '\0', sym.CHARACTER_LITERAL);
        }
    }

    private Token boolean_lit(boolean x) {
        lastTokenWasDot = false;
        return new BooleanLiteral(pos(), x, sym.BOOLEAN_LITERAL);
    }

    private Token null_lit() {
        lastTokenWasDot = false;
        return new NullLiteral(pos(), sym.NULL_LITERAL);
    }

    private Token string_lit() {
        lastTokenWasDot = false;
        return new StringLiteral(pos(sb.length()), sb.toString(),
                                 sym.STRING_LITERAL);
    }

	private int comment_count = 0;
	
    private String chop(int i, int j) {
        return yytext().substring(i,yylength()-j);
    }

    private String chop(int j) {
        return chop(0, j);
    }

    private String chop() {
        return chop(0, 1);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer_c(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer_c(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1776) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 82: 
          { sb.append('\r');
          }
        case 103: break;
        case 75: 
          { sb.append( '\f' );
          }
        case 104: break;
        case 54: 
          { return op(sym.GTEQ);
          }
        case 105: break;
        case 14: 
          { return op(sym.RBRACK);
          }
        case 106: break;
        case 85: 
          { sb.append('\'');
          }
        case 107: break;
        case 81: 
          { sb.append('\t');
          }
        case 108: break;
        case 7: 
          { return op(sym.DOT);
          }
        case 109: break;
        case 51: 
          { return op(sym.MINUSMINUS);
          }
        case 110: break;
        case 96: 
          { return op(sym.LSHIFTEQ);
          }
        case 111: break;
        case 24: 
          { return op(sym.AND);
          }
        case 112: break;
        case 22: 
          { return op(sym.QUESTION);
          }
        case 113: break;
        case 63: 
          { return op(sym.PLUSEQ);
          }
        case 114: break;
        case 20: 
          { return op(sym.NOT);
          }
        case 115: break;
        case 43: 
          { return op(sym.DIVEQ);
          }
        case 116: break;
        case 13: 
          { return op(sym.LBRACK);
          }
        case 117: break;
        case 99: 
          { return null_lit();
          }
        case 118: break;
        case 53: 
          { return op(sym.EQEQ);
          }
        case 119: break;
        case 39: 
          { returnToPrevState();
                                   return op(sym.SEMICOLON);
          }
        case 120: break;
        case 60: 
          { return op(sym.ANDAND);
          }
        case 121: break;
        case 67: 
          { comment_count = comment_count + 1;
          }
        case 122: break;
        case 26: 
          { return op(sym.PLUS);
          }
        case 123: break;
        case 37: 
          { parenLevel--;
                                   if (inPerPointcut &&
                                       parenLevel == ((NestingState)nestingStack.peek()).parenLevel)
                                     { returnToPrevState();
                                       //currentState = IN_ASPECTJ;
                                       inPerPointcut = false;
                                     }
                                   return op(sym.RPAREN);
          }
        case 124: break;
        case 9: 
          { parenLevel++; return op(sym.LPAREN);
          }
        case 125: break;
        case 38: 
          { curlyBraceLevel++;
                                   returnToPrevState();
                                   return op(sym.LBRACE);
          }
        case 126: break;
        case 94: 
          { return op(sym.RSHIFTEQ);
          }
        case 127: break;
        case 100: 
          { return op(sym.URSHIFTEQ);
          }
        case 128: break;
        case 31: 
          { sb.append( yytext() );
          }
        case 129: break;
        case 41: 
          { return op(sym.PC_PLUS);
          }
        case 130: break;
        case 29: 
          { enterLexerState(CHARACTER); sb.setLength(0);
          }
        case 131: break;
        case 65: 
          { return op(sym.XOREQ);
          }
        case 132: break;
        case 73: 
          { sb.append( '\t' );
          }
        case 133: break;
        case 68: 
          { comment_count = comment_count - 1; 
		 	   	if (comment_count < 0) 
	                	       	eq.enqueue(ErrorInfo.LEXICAL_ERROR,"unmatched */",pos());
	                        if (comment_count == 0) {
                            		inComment = false;
    		            	       	returnToPrevState(); 
                            	}
          }
        case 134: break;
        case 27: 
          { return op(sym.XOR);
          }
        case 135: break;
        case 35: 
          { returnToPrevState();
                                   return char_lit(sb.toString());
          }
        case 136: break;
        case 71: 
          { try {
                                       int x = Integer.parseInt(chop(1,0), 8);
                                       sb.append((char) x);
                                   }
                                   catch (NumberFormatException e) {
                                       eq.enqueue(ErrorInfo.LEXICAL_ERROR,
                                                  "Illegal octal escape \""
                                                  + yytext() + "\"", pos());
                                   }
          }
        case 137: break;
        case 34: 
          { returnToPrevState();
                                  eq.enqueue(ErrorInfo.LEXICAL_ERROR,
                                             "Unclosed character literal",
                                             pos(sb.length()));
          }
        case 138: break;
        case 80: 
          { sb.append('\\');
          }
        case 139: break;
        case 8: 
          { return op(sym.MINUS);
          }
        case 140: break;
        case 101: 
          { return boolean_lit(false);
          }
        case 141: break;
        case 30: 
          { enterLexerState(STRING); sb.setLength(0);
          }
        case 142: break;
        case 89: 
          { return op(sym.PC_DOTDOT);
          }
        case 143: break;
        case 76: 
          { sb.append( '\n' );
          }
        case 144: break;
        case 69: 
          { inComment = false;
					returnToPrevState();
          }
        case 145: break;
        case 4: 
          { // Keywords common to all states first.
    	LexerAction la;
    	switch(yystate()) {
    		case YYINITIAL:
    			la = (LexerAction) javaKeywords.get(yytext());
				break;
				
    		case ASPECTJ:
    			la = (LexerAction) aspectJKeywords.get(yytext());
				break;
				
    		case POINTCUT:
    			la = (LexerAction) pointcutKeywords.get(yytext());
				break;
				
    		case POINTCUTIFEXPR:
    			la = (LexerAction) pointcutIfExprKeywords.get(yytext());
				break;
			
			default:
				la = null; // Will never happen - this pattern only matches if state is one of the 4.
		}
		
		if(la != null) {
			return key(la.getToken(this));
		}
		
		// OK, it's not a keyword, so it's an identifier.
		/* Note that if both Identifier and Name Pattern match, then    
		   Identifier will be chosen first, since it is an earlier rule.
		 */
		return id();
          }
        case 146: break;
        case 40: 
          { return op(sym.PC_NOT);
          }
        case 147: break;
        case 18: 
          { return op(sym.GT);
          }
        case 148: break;
        case 23: 
          { return op(sym.COLON);
          }
        case 149: break;
        case 11: 
          { curlyBraceLevel++; return op(sym.LBRACE);
          }
        case 150: break;
        case 102: 
          { return id();
          }
        case 151: break;
        case 32: 
          { returnToPrevState();
                                   eq.enqueue(ErrorInfo.LEXICAL_ERROR,
                                              "Unclosed string literal",
                                              pos(sb.length()));
          }
        case 152: break;
        case 17: 
          { return op(sym.EQ);
          }
        case 153: break;
        case 46: 
          { return int_lit(yytext(), 8);
          }
        case 154: break;
        case 21: 
          { return op(sym.COMP);
          }
        case 155: break;
        case 1: 
          { eq.enqueue(ErrorInfo.LEXICAL_ERROR,
                                              "Illegal character \"" +
                                              yytext() + "\"", pos());
          }
        case 156: break;
        case 87: 
          { sb.append('\b');
          }
        case 157: break;
        case 98: 
          { return boolean_lit(true);
          }
        case 158: break;
        case 45: 
          { return op(sym.MULTEQ);
          }
        case 159: break;
        case 6: 
          { return int_lit(yytext(), 10);
          }
        case 160: break;
        case 19: 
          { return op(sym.LT);
          }
        case 161: break;
        case 61: 
          { return op(sym.OREQ);
          }
        case 162: break;
        case 10: 
          { parenLevel--; 
                                   if ( (yystate() == POINTCUTIFEXPR) &&
                                        (parenLevel == ((NestingState)nestingStack.peek()).parenLevel))
                                      { returnToPrevState();
                                      } 
                                   return op(sym.RPAREN);
          }
        case 163: break;
        case 49: 
          { return long_lit(chop(), 10);
          }
        case 164: break;
        case 64: 
          { return op(sym.PLUSPLUS);
          }
        case 165: break;
        case 83: 
          { sb.append('\f');
          }
        case 166: break;
        case 16: 
          { return op(sym.COMMA);
          }
        case 167: break;
        case 15: 
          { return op(sym.SEMICOLON);
          }
        case 168: break;
        case 55: 
          { return op(sym.RSHIFT);
          }
        case 169: break;
        case 95: 
          { return op(sym.URSHIFT);
          }
        case 170: break;
        case 74: 
          { sb.append( '\r' );
          }
        case 171: break;
        case 58: 
          { return op(sym.NOTEQ);
          }
        case 172: break;
        case 88: 
          { return id_pattern();
          }
        case 173: break;
        case 79: 
          { sb.append( '\b' );
          }
        case 174: break;
        case 70: 
          { eq.enqueue(ErrorInfo.LEXICAL_ERROR,
                                              "Illegal escape character \"" +
                                              yytext() + "\"", pos());
          }
        case 175: break;
        case 25: 
          { return op(sym.OR);
          }
        case 176: break;
        case 90: 
          { return op(sym.PC_ANDAND);
          }
        case 177: break;
        case 56: 
          { return op(sym.LTEQ);
          }
        case 178: break;
        case 33: 
          { returnToPrevState();
                                   return string_lit();
          }
        case 179: break;
        case 52: 
          { return op(sym.MINUSEQ);
          }
        case 180: break;
        case 78: 
          { sb.append( '\"' );
          }
        case 181: break;
        case 2: 
          { /* ignore */
          }
        case 182: break;
        case 47: 
          { return double_lit(yytext());
          }
        case 183: break;
        case 3: 
          { return op(sym.DIV);
          }
        case 184: break;
        case 5: 
          { return op(sym.MULT);
          }
        case 185: break;
        case 77: 
          { sb.append( '\'' );
          }
        case 186: break;
        case 93: 
          { return int_lit(chop(2,0), 16);
          }
        case 187: break;
        case 62: 
          { return op(sym.OROR);
          }
        case 188: break;
        case 28: 
          { return op(sym.MOD);
          }
        case 189: break;
        case 72: 
          { sb.append( '\\' );
          }
        case 190: break;
        case 59: 
          { return op(sym.ANDEQ);
          }
        case 191: break;
        case 97: 
          { return long_lit(chop(2,1), 16);
          }
        case 192: break;
        case 84: 
          { sb.append('\n');
          }
        case 193: break;
        case 66: 
          { return op(sym.MODEQ);
          }
        case 194: break;
        case 86: 
          { sb.append('\"');
          }
        case 195: break;
        case 50: 
          { return double_lit(chop());
          }
        case 196: break;
        case 36: 
          { return op(sym.PC_MULT);
          }
        case 197: break;
        case 57: 
          { return op(sym.LSHIFT);
          }
        case 198: break;
        case 12: 
          { curlyBraceLevel--; 
                                   
                                     /* if curlyBraceLevel is same as
                                          top of nestingStack, then 
                                          exiting a class, interface or
                                          aspect declaration. */
                                          
                                     if (!nestingStack.isEmpty())
                                       { if (curlyBraceLevel == 
                                           ((NestingState) nestingStack.peek()).
                                                                  nestingLevel)
                                           { returnToPrevState();
                                             }
                                          }
                                        else // an extra }
                                          { // don't change the state
                                            // hand over token for parser to
                                            // find sytax error
                                          }
                                        return op(sym.RBRACE);
          }
        case 199: break;
        case 91: 
          { return op(sym.PC_OROR);
          }
        case 200: break;
        case 92: 
          { return long_lit(chop(), 8);
          }
        case 201: break;
        case 48: 
          { return float_lit(chop());
          }
        case 202: break;
        case 42: 
          { if(abc.main.options.OptionsParser.v().nested_comments()) 
						enterLexerState(NESTABLECOMMENT);
				     else 
						enterLexerState(NONNESTABLECOMMENT); 
                                     inComment = true; 
                                     comment_count = comment_count + 1;
          }
        case 203: break;
        case 44: 
          { eq.enqueue(ErrorInfo.LEXICAL_ERROR,
                                                  "unmatched */",pos());
          }
        case 204: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { Position mypos = pos();

          if (inComment) 
           { // for some reason EOF gets reported twice and only want to issue
             //    error once. 
             if (!reportedUnclosedComment) 
               { eq.enqueue(ErrorInfo.LEXICAL_ERROR, 
                       "unclosed comment at EOF, expecting */", 
                        new Position(file(),mypos.line()-1));
                 reportedUnclosedComment = true;
               }
           }

//		if(!eq.hasErrors())
//			if(!nestingStack.isEmpty()) System.out.println("XXXXXXXXX: Failed to consume entire stack while lexing: " + nestingStack);

         return new EOF(new Position(file(),mypos.line()-1), sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
