/* abc - The AspectBench Compiler
 * Copyright (C) 2004 Julian Tibble
 * Copyright (C) 2005 Ondrej Lhotak
 *
 * This compiler is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

include "../../aspectj/parse/aspectj.ppg"

package abc.eaj.parse;

import abc.eaj.ast.*;
import abc.eaj.types.EAJTypeSystem;

import polyglot.ext.jl.parse.Name;

parser Grm extends abc.aspectj.parse.Grm {:
    public final EAJTypeSystem ts;
    public final EAJNodeFactory nf;

    public Grm(Lexer l, TypeSystem t, NodeFactory n, ErrorQueue q) {
        super(l, t, n, q);
        ts = (EAJTypeSystem) t;
        nf = (EAJNodeFactory) n;
    }
:};


// ------- new tokens ------------------------------

terminal Token PC_CAST;
terminal Token PC_THROW;
terminal Token GLOBAL;
terminal Token PC_CFLOWDEPTH;
terminal Token PC_CFLOWBELOWDEPTH;
terminal Token PC_LET;
terminal Token PC_CONTAINS;
terminal Token PC_ARRAYGET;
terminal Token PC_ARRAYSET;
terminal Token PC_LOCK;
terminal Token PC_UNLOCK;
terminal Token PC_MAYBE_SHARED;

// ------- new non-terminals -----------------------

non terminal GlobalPointcutDecl global_pointcut_decl;




start with goal;

extend basic_pointcut_expr ::=
        PRIVATE:x LPAREN formal_parameter_list_opt:a RPAREN LPAREN pointcut_expr:b RPAREN:y
        {:
            Grm.parserTrace("PRIVATE formal_parameter_list, pointcut_expr");
            RESULT = parser.nf.PCLocalVars(parser.pos(x,y), a, b);
        :}
    |
        PC_CAST:x LPAREN type_pattern_expr:a RPAREN:y
        {:
            Grm.parserTrace("CAST pointcut");
            RESULT = parser.nf.PCCast(parser.pos(x,y), a);
        :}
    |
        PC_THROW:x LPAREN RPAREN:y
        {:
            Grm.parserTrace("THROW pointcut");
            RESULT = parser.nf.PCThrow(parser.pos(x,y), parser.nf.TPEUniversal(parser.pos(x,y)));
        :}
    |
        PC_THROW:x LPAREN type_pattern_expr:a RPAREN:y
        {:
            Grm.parserTrace("THROW pointcut with type_pattern_expr");
            RESULT = parser.nf.PCThrow(parser.pos(x,y), a);
        :}
    |
        PC_CFLOWDEPTH:x LPAREN IDENTIFIER:i COMMA pointcut_expr:a RPAREN:y
        {:
            Grm.parserTrace("CFLOWDEPTH pointcut");
            RESULT = parser.nf.PCCflowDepth(parser.pos(x,y), parser.nf.Local(parser.pos(i),i.getIdentifier()), a);
        :}
    |
        PC_CFLOWBELOWDEPTH:x LPAREN IDENTIFIER:i COMMA pointcut_expr:a RPAREN:y
        {:
            Grm.parserTrace("CFLOWBELOWDEPTH pointcut");
            RESULT = parser.nf.PCCflowBelowDepth(parser.pos(x,y), parser.nf.Local(parser.pos(i),i.getIdentifier()), a);
        :}
    |
        PC_LET:x LPAREN IDENTIFIER:i COMMA expression:e RPAREN:y
        {:
            Grm.parserTrace("LET pointcut");
            Local var = parser.nf.Local(parser.pos(i), i.getIdentifier());
            RESULT = parser.nf.PCLet(parser.pos(x,y), var, e);
        :}
    |
    	PC_CONTAINS:x LPAREN pointcut_expr:pc RPAREN:y
    	{:
    		Grm.parserTrace("CONTAINS pointcut");
    		RESULT = parser.nf.PCContains(parser.pos(x,y), pc);
    	:}
    |
    	PC_ARRAYGET:x LPAREN RPAREN:y
    	{:
    		Grm.parserTrace("ARRAYGET pointcut");
    		RESULT = parser.nf.PCArrayGet(parser.pos(x, y));
    	:}
    |
    	PC_ARRAYSET:x LPAREN RPAREN:y
    	{:
    		Grm.parserTrace("ARRAYSET pointcut");
    		RESULT = parser.nf.PCArraySet(parser.pos(x, y));
    	:}
    |
        PC_LOCK:x LPAREN RPAREN:y
        {:
            Grm.parserTrace("LOCK pointcut");
            RESULT = parser.nf.PCLock(parser.pos(x,y));
        :}
    |
        PC_UNLOCK:x LPAREN RPAREN:y
        {:
            Grm.parserTrace("UNLOCK pointcut");
            RESULT = parser.nf.PCUnlock(parser.pos(x,y));
        :}
    |
        PC_MAYBE_SHARED:x LPAREN RPAREN:y
        {:
            Grm.parserTrace("MAYBE_SHARED pointcut");
            RESULT = parser.nf.PCMaybeShared(parser.pos(x,y));
        :}
    ;

extend class_member_declaration ::=
        global_pointcut_decl:a
        {:
            Grm.parserTrace("class_member_declaration is a global_pointcut_decl");
            List l = new TypedList(new LinkedList(), ClassMember.class, false);
            l.add(a);
            RESULT = l;
        :}
    ;

extend interface_member_declaration ::=
        global_pointcut_decl:a
        {:
            Grm.parserTrace("class_member_declaration is a global_pointcut_decl");
            List l = new TypedList(new LinkedList(), ClassMember.class, false);
            l.add(a);
            RESULT = l;
        :}
    ;


global_pointcut_decl ::=
        GLOBAL:x COLON classname_pattern_expr:a COLON pointcut_expr:b SEMICOLON:y
        {:
            Grm.parserTrace("GLOBAL type_pattern_expr, pointcut_expr");
            RESULT = parser.nf.GlobalPointcutDecl(parser.pos(x,y),a, b);
        :}
    ;
