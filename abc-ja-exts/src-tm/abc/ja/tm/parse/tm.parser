/* abc - The AspectBench Compiler
 * Copyright (C) 2008 Pavel Avgustinov
 * Copyright (C) 2008 Torbjorn Ekman
 * Copyright (C) 2008 Julian Tibble
 *
 * This compiler is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This compiler is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

/* abc - The AspectBench Compiler
 * Copyright (C) 2008 Pavel Avgustinov
 * Copyright (C) 2008 Torbj√∂rn Ekman
 *
 * This compiler is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */


BodyDecl aspect_body_declaration =
    tracematch.a
    {:
        ParserTrace.parserTrace("aspect_body_declaration is just a tracematch\n");
        ParserTrace.parserTrace("LINE " + a.lineNumber());
        ParserTrace.parserTrace("-----------------------------------------------\n");
        return a;
    :}
;


TraceMatchDecl tracematch =
    modifiers.m? TRACEMATCH.t
    LPAREN formal_parameter_list.p? RPAREN throws.e?
    LBRACE
        symbol_declaration_list.s
        frequent_symbols_declaration.f?
        tm_pattern.r
        block.b
    RBRACE.y
    {:
        ParserTrace.parserTrace("tracematch definition");
        TraceMatchDecl tcd = new TraceMatchDecl(new Modifiers(m),
            new TMAdviceSpec(p), r, e, b, s, f);
    	return tcd;
    :}
|
    modifiers.m? type TRACEMATCH.t
    LPAREN formal_parameter_list.p? RPAREN throws.e?
    LBRACE
        symbol_declaration_list.s
        frequent_symbols_declaration.f?
        tm_pattern.r
        block.b
    RBRACE.y
    {:
        ParserTrace.parserTrace("tracematch definition");
        TraceMatchDecl tcd = new TraceMatchDecl(new Modifiers(m),
            new TMAroundSpec(p, type), r, e, b, s, f);
    	return tcd;
    :}
|
    modifiers.m? VOID TRACEMATCH.t
    LPAREN formal_parameter_list.p? RPAREN throws.e?
    LBRACE
        symbol_declaration_list.s
        frequent_symbols_declaration.f?
        tm_pattern.r
        block.b
    RBRACE.y
    {:
        ParserTrace.parserTrace("tracematch definition");
        TraceMatchDecl tcd = new TraceMatchDecl(new Modifiers(m),
            new TMAroundSpec(p, new PrimitiveTypeAccess("void")),
            r, e, b, s, f);
    	return tcd;
    :}
;

// tracematches can be perthread
Modifier modifier =
    PERTHREAD.x {:
    	ParserTrace.parserTrace("PerThread modifier");
    	return new Modifier("perthread");
    :}
;

List symbol_declaration_list =
    symbol_declaration.a
    {:
        ParserTrace.parserTrace("symbol declaration list");

        return new List<SymbolDecl>().add(a);
    :}
|
    symbol_declaration_list.a symbol_declaration.b
    {:
        ParserTrace.parserTrace("symbol declaration list");

        return a.add(b);
    :}
;
 

SymbolDecl symbol_declaration =
    SYM.x IDENTIFIER.a symbol_kind.c COLON pointcut_expr.d SEMICOLON.y
    {:
        ParserTrace.parserTrace("Symbol declaration");
        return new SymbolDecl(a, c, d);
    :}
;


SymbolKind symbol_kind =
    BEFORE.x
    {:
        ParserTrace.parserTrace("Before symbol");
        return new BeforeSymbol();
    :}
|
    AFTER.x
    {:
        ParserTrace.parserTrace("After symbol");
        return new AfterSymbol();
    :}
|
    AFTER.x PC_RETURNING.y
    {:
        ParserTrace.parserTrace("After returning symbol (no var)");
        return new AfterReturningSymbol(new Opt());
    :}
|
    AFTER.x PC_RETURNING LPAREN IDENTIFIER.a RPAREN.y
    {:
        ParserTrace.parserTrace("After returning symbol (with var)");
        return new AfterReturningSymbol(new Opt(new VarAccess(a)));
    :}
|
    AFTER.x PC_THROWING.y
    {:
        ParserTrace.parserTrace("After throwing symbol (no var)");
        return new AfterThrowingSymbol(new Opt());
    :}
|
    AFTER.x PC_THROWING LPAREN IDENTIFIER.a RPAREN.y
    {:
        ParserTrace.parserTrace("After throwing symbol (with var)");
        return new AfterThrowingSymbol(new Opt(new VarAccess(a)));
    :}
|
    AROUND.x
    {:
        ParserTrace.parserTrace("Around symbol (no args)");
        return new AroundSymbol(new List());
    :}
|
    AROUND.x LPAREN name_list.a RPAREN.y
    {:
        ParserTrace.parserTrace("Around symbol (with args)");
        return new AroundSymbol(a);
    :}
;


List name_list =
    IDENTIFIER.a
    {:
        ParserTrace.parserTrace("Name list (singleton)");
        return new List<Access>().add(new VarAccess(a));
    :}
|
    name_list.a COMMA IDENTIFIER.b
    {:
        ParserTrace.parserTrace("Name list (comma)");
        return a.add(new VarAccess(b));
    :}
;


List frequent_symbols_declaration =
    FREQUENT.x symbol_list.a SEMICOLON.y
    {:
        ParserTrace.parserTrace("Frequent decl");
        return a;
    :}
; 


List symbol_list =
    IDENTIFIER.a
    {:
        ParserTrace.parserTrace("Symbol list (single)");
        return new List<SymbolAccess>().add(new SymbolAccess(a));
    :}
|
    symbol_list.a COMMA IDENTIFIER.b
    {:
        ParserTrace.parserTrace("Symbol list (multiple)");
        return a.add(new SymbolAccess(b));
    :}
;

Regex tm_pattern =
    regex_or.a
    {:
    	return a;
    :}
|
    FILTERMATCH COLON regex_or.a
    {:
    	return a;
    :}
|
    SKIPMATCH COLON skip_or.a
    {:
    	return a;
    :}
;

Regex regex_or =
    regex_and.a
    {:
        return a;
    :}
|
    regex_and.a OR regex_or.b
    {:
        return new RegexAlternation(a, b);
    :}
;


Regex regex_and = 
    regex_count.a
    {:
        return a;
    :}
|   
    regex_count.a regex_and.b
    {:
        return new RegexSequence(a, b);
    :}
;
 

Regex regex_count =
    regex_simple.a
    {:
        return a;
    :}
|
    regex_simple.a MULT.y
    {:
        return new RegexStar(a);
    :}
|
    regex_simple.a PLUS.y
    {:
        return new RegexPlus(a);
    :}
|
    regex_simple.a LBRACK INTEGER_LITERAL.n RBRACK.y
    {:
        return new RegexCount(a, new IntegerLiteral(n), new IntegerLiteral(n));
    :}
|
    regex_simple.a LBRACK INTEGER_LITERAL.m COMMA INTEGER_LITERAL.n RBRACK.y
    {:
        return new RegexCount(a, new IntegerLiteral(m), new IntegerLiteral(n));
    :}
;


Regex regex_simple =
    IDENTIFIER.a
    {:
        return new RegexSymbol(new SymbolAccess(a));
    :}
|
    LPAREN regex_or.a RPAREN
    {:
        return a;
    :}
;

Regex skip_regex_simple =
    IDENTIFIER.a
    {:
    	return new RegexSymbol(new SymbolAccess(a));
    :}
|
    LPAREN skip_or.a RPAREN
    {:
    	return a;
    :}
;

Regex skip_or =
    skip_seq.a
    {:
        return a;
    :}
|
    skip_seq.a OR skip_or.b
    {:
        return new RegexAlternation(a, b);
    :}
;


Regex skip_seq = 
    skip_regex_simple.a
    {:
        return a;
    :}
|   
    skip_regex_simple.a NOT IDENTIFIER.b skip_seq.c
    {:
    	return new RegexSkipSequence(a, new List().add(new SymbolAccess(b)), c);
    :}
|
    skip_regex_simple.a NOT LPAREN regex_symbol_disj.b RPAREN skip_seq.c
    {:
        return new RegexSkipSequence(a, b, c);
    :}
|
    skip_regex_simple.a skip_seq.b
    {:
    	return new RegexSkipSequence(a, new List(), b);
    :}
;
 

List regex_symbol_disj =
     IDENTIFIER.a
     {:
     	return new List<SymbolAccess>().add(new SymbolAccess(a));
     :}
 |
     regex_symbol_disj.a IDENTIFIER.b
     {:
     	return a.add(new SymbolAccess(b));
     :}
 ;
