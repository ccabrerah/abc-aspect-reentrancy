/* abc - The AspectBench Compiler
 * Copyright (C) 2008 Pavel Avgustinov
 * Copyright (C) 2008 Torbjorn Ekman
 * Copyright (C) 2008 Julian Tibble
 *
 * This compiler is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This compiler is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

aspect SymbolNameAnalysis
{
    syn String SymbolAccess.name() = getID();
    syn String SymbolDecl.name() = getID();

    inh TypeDecl SymbolDecl.hostType();

    inh int SymbolDecl.numTraceMatchParameter();
    eq TraceMatchDecl.getSymbolDecl().numTraceMatchParameter() =
        getAdviceSpec().getNumParameter();

    inh ParameterDeclaration SymbolDecl.traceMatchParameter(int i);
    eq TraceMatchDecl.getSymbolDecl().traceMatchParameter(int i) =
        getAdviceSpec().getParameter(i);

    syn lazy List<ParameterDeclaration> SymbolDecl.getParameterList()
    {
        List<ParameterDeclaration> params = new List<ParameterDeclaration>();
        for (int i = 0; i < numTraceMatchParameter(); i++) {
            ParameterDeclaration param = traceMatchParameter(i);
            if (this.refersTo(param)) {
                Modifiers mods = new Modifiers(new List());
                Access type = param.type().createQualifiedAccess();
                String name = param.name();

                ParameterDeclaration newparam = param.isImplicit()
                    ? new ImplicitParameterDeclaration(mods, type, name)
                    : new ParameterDeclaration(mods, type, name);
                params = params.add(newparam);
            }
        }
        return params;
    }

    eq SymbolDecl.getParameter().isMethodParameter() = false;
    eq SymbolDecl.getParameter().isConstructorParameter() = false;
    eq SymbolDecl.getParameter().isExceptionHandlerParameter() = false;
}
