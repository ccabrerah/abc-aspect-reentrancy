/* abc - The AspectBench Compiler
 * Copyright (C) 2008 Pavel Avgustinov
 * Copyright (C) 2008 Torbjorn Ekman
 * Copyright (C) 2008 Julian Tibble
 *
 * This compiler is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This compiler is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

aspect TMInfo
{
    //
    // contains methods for creating all of the lists/mappings needed
    // by the AspectInfo representation of a TraceMatch
    //


    // Make a list of abc-formals - one for each of the tracematch formals
    syn java.util.List<Formal> TraceMatchDecl.traceMatchFormals()
    {
        ArrayList<Formal> formals = new ArrayList<Formal>();
        for (int i = 0; i < getAdviceSpec().getNumParameter(); i++)
        {
            ParameterDeclaration param = getAdviceSpec().getParameter(i);
            if (!param.isImplicit())
                formals.add(param.formal());
        }
        return formals;
    }


    // Make a list of abc-formals for the parameters to the tracematch
    // body method - this only includes around parameters and the implicit
    // family of variables thisJoinPoint etc.
    syn java.util.List<Formal> TraceMatchDecl.bodyAdviceFormals()
    {
        ArrayList<Formal> formals = new ArrayList<Formal>();
        addAroundFormals(formals);
        for (int i = 0; i < getAdviceSpec().getNumParameter(); i++)
        {
            ParameterDeclaration param = getAdviceSpec().getParameter(i);
            if (param.isImplicit())
                formals.add(param.formal());
        }
        return formals;
    }

    void TraceMatchDecl.addAroundFormals(java.util.List<Formal> formals)
    {
        for (int i = 0; i < getNumSymbolDecl(); i++)
            getSymbolDecl(i).getSymbolKind().addAroundFormals(formals);
    }

    void SymbolKind.addAroundFormals(java.util.List<Formal> formals) { }
    void AroundSymbol.addAroundFormals(java.util.List<Formal> formals)
    {
        for (int i = 0; i < getNumVarAccess(); i++) {
            ParameterDeclaration decl;
            decl = (ParameterDeclaration) getVarAccess(i).decl();
            formals.add(decl.formal());
        }
    }


    syn java.util.List<String> TraceMatchDecl.frequentSymbolNames()
    {
        ArrayList<String> names = new ArrayList<String>();
        for (int i = 0; i < getNumFrequent(); i++)
            names.add(getFrequent(i).name());
        return names;
    }


    syn Map TraceMatchDecl.symbolToFormalNameList()
    {
        Map sym_to_vars = new HashMap();
        for (int i = 0; i < getNumSymbolDecl(); i++) {
            SymbolDecl symbol = getSymbolDecl(i);
            sym_to_vars.put(symbol.name(), symbol.formalNameList());
        }
        return sym_to_vars;
    }

    syn java.util.List<String> SymbolDecl.formalNameList()
    {
        ArrayList<String> vars = new ArrayList<String>();
        for (int i = 0; i < getNumParameter(); i++)
            if (!getParameter(i).isImplicit())
                vars.add(getParameter(i).name());
        return vars;
    }


    syn Map TraceMatchDecl.symbolToAdviceName()
    {
        Map sym_to_advice = new HashMap();
        for (int i = 0; i < getNumSymbolDecl(); i++) {
            sym_to_advice.put(getSymbolDecl(i).name(),
                            getSymbolDecl(i).perSymbolAdviceName());
        }
        return sym_to_advice;
    }
}
