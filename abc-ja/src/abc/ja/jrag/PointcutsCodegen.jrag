/* abc - The AspectBench Compiler
 * Copyright (C) 2008 Pavel Avgustinov
 * Copyright (C) 2008 Torbjorn Ekman
 * Copyright (C) 2008 Julian Tibble
 *
 * This compiler is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This compiler is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

aspect PointcutCodegen
{
    //
    // The abc backend works on a representation of AspectJ constructs
    // known as the "aspectinfo". Each pointcut expression in the frontend
    // is converted to an aspectinfo representation.
    //

    abstract public Pointcut PointcutExpr.pointcut();


    // boolean pointcut expressions

    public Pointcut AndPointcutExpr.pointcut() {
        return AndPointcut.construct(getLhs().pointcut(),
                                     getRhs().pointcut(), pos());
    }

    public Pointcut OrPointcutExpr.pointcut() {
        return OrPointcut.construct(getLhs().pointcut(),
                                    getRhs().pointcut(), pos());
    }

    public Pointcut NegPointcutExpr.pointcut() {
        return NotPointcut.construct(getPointcutExpr().pointcut(), pos());
    }


    // primitive pointcuts (in alphabetical order)

    public Pointcut AdviceExecutionPointcutExpr.pointcut() {
        return AndPointcut.construct(
                    new WithinAdvice(pos()),
                    new Execution(pos()),
                    pos());
    }

    public Pointcut ArgsPointcutExpr.pointcut() {
        java.util.List arg_patterns = new ArrayList();

        for(int i = 0; i < getNumPattern(); i++)
            arg_patterns.add(getPattern(i).argPattern());

        return new Args(arg_patterns, pos());
    }

    public Pointcut CallPointcutExpr.pointcut() {
        if (getPattern().isMethodPattern())
            return new MethodCall(getPattern().methodPattern(), pos());
        else
            return new
                ConstructorCall(getPattern().constructorPattern(), pos());
    }

    public Pointcut CflowPointcutExpr.pointcut() {
        return new Cflow(getPointcut().pointcut(), pos());
    }

    public Pointcut CflowBelowPointcutExpr.pointcut() {
        return new CflowBelow(getPointcut().pointcut(), pos());
    }

    public Pointcut EmptyPointcutExpr.pointcut() {
        return new EmptyPointcut(pos());
    }

    public Pointcut ExecutionPointcutExpr.pointcut() {
        Pointcut withincode;
        if (getPattern().isMethodPattern())
            withincode = new WithinMethod(getPattern().methodPattern(), pos());
        else
            withincode = new
                WithinConstructor(getPattern().constructorPattern(), pos());

        return AndPointcut.construct(withincode, new Execution(pos()), pos());
    }

    public Pointcut GetPointcutExpr.pointcut() {
        return new GetField(getPattern().fieldPattern(), pos());
    }

    public Pointcut HandlerPointcutExpr.pointcut() {
        return new Handler(getPattern().classnamePattern(), pos());
    }

    public Pointcut IfPointcutExpr.pointcut() {
        java.util.List vars = methodVars();

        int jp = vars.indexOf(new Var("thisJoinPoint", null));
        int jpsp = vars.indexOf(new Var("thisJoinPointStaticPart", null));
        int ejp = vars.indexOf(new Var("thisEnclosingJoinPointStaticPart", null));

        return new If(vars, methodSig(), jp, jpsp, ejp, pos());
    }

    public Pointcut InitializationPointcutExpr.pointcut() {
        Pointcut within_constructor =
            new WithinConstructor(getPattern().constructorPattern(), pos());

        Pointcut class_init =
            AndPointcut.construct(
                within_constructor, new ClassInitialization(pos()), pos());

        if (!getPattern().matchesEmptyArgList())
            return class_init;

        Pointcut interface_init =
            new InterfaceInitialization(
                getPattern().getMemberNamePattern().base().classnamePattern(),
                pos());

        return OrPointcut.construct(
                class_init,
                interface_init,
                pos());
    }

    public Pointcut NamedPointcutExpr.pointcut() {
        java.util.List arg_patterns = new ArrayList();

        for(int i = 0; i < getNumPattern(); i++)
            arg_patterns.add(getPattern(i).argPattern());

        Object key = new Object();
        Map decl_map = new HashMap();
        decl_map.put(key, decl().pointcutDecl());

        return new PointcutRef(key, decl_map, arg_patterns,
                                pos(), getName().lastAccess().isQualified());
    }

    public Pointcut PreInitializationPointcutExpr.pointcut() {
        return AndPointcut.construct(
            new WithinConstructor(getPattern().constructorPattern(), pos()),
            new Preinitialization(pos()),
            pos());
    }

    public Pointcut SetPointcutExpr.pointcut() {
        return new SetField(getPattern().fieldPattern(), pos());
    }

    public Pointcut StaticInitializationPointcutExpr.pointcut() {
        Pointcut directly_within =
            new DirectlyWithin(getPattern().classnamePattern(), pos());
        Pointcut within_static_init =
            new WithinStaticInitializer(pos());
        Pointcut execution = new Execution(pos());

        return AndPointcut.construct(
                directly_within,
                AndPointcut.construct(within_static_init, execution, pos()),
                pos());
    }

    public Pointcut TargetPointcutExpr.pointcut() {
        return getPattern().targetPointcut();
    }

    public Pointcut ThisPointcutExpr.pointcut() {
        return getPattern().thisPointcut();
    }

    public Pointcut WithinPointcutExpr.pointcut() {
        return new Within(getPattern().classnamePattern(), pos());
    }

    public Pointcut WithinCodePointcutExpr.pointcut() {
        if (getPattern().isMethodPattern())
            return new WithinMethod(getPattern().methodPattern(), pos());

        return new WithinConstructor(getPattern().constructorPattern(), pos());
    }



    //
    // Arguments to args/target/this also need to be converted
    // into aspectinfo format
    //

    // find an ArgPattern from a BindingPattern
    syn ArgPattern BindingPattern.argPattern();
    eq StarBindingPattern.argPattern() = new ArgAny(pos());
    eq DotDotBindingPattern.argPattern() = new ArgFill(pos());
    eq NameBindingPattern.argPattern()
    {
        Pattern pat = getPattern();
        if (pat.isVariable())
            return new ArgVar(new Var(pat.variableName(), pos()), pos());
        else
            return new ArgType(AbcFactory.AbcType(pat.type().getSootType()),
                               pos());
    }

    // find a target pointcut from a BindingPattern
    syn Pointcut BindingPattern.targetPointcut();
    eq StarBindingPattern.targetPointcut() = new TargetAny(pos());
    eq DotDotBindingPattern.targetPointcut()
    {
        throw new InternalCompilerError(
            "trying to create an aspectinfo pointcut for 'target(..)'");
    }
    eq NameBindingPattern.targetPointcut()
    {
        Pattern pat = getPattern();
        if (pat.isVariable())
            return new TargetVar(new Var(pat.variableName(), pos()), pos());
        return new TargetType(AbcFactory.AbcType(pat.type().getSootType()),
                              pos());
    }

    // find a this pointcut from a BindingPattern
    syn Pointcut BindingPattern.thisPointcut();
    eq StarBindingPattern.thisPointcut() = new ThisAny(pos());
    eq DotDotBindingPattern.thisPointcut()
    {
        throw new InternalCompilerError(
            "trying to create an aspectinfo pointcut for 'this(..)'");
    }
    eq NameBindingPattern.thisPointcut()
    {
        Pattern pat = getPattern();
        if (pat.isVariable())
            return new ThisVar(new Var(pat.variableName(), pos()), pos());
        return new ThisType(AbcFactory.AbcType(pat.type().getSootType()),
                            pos());
    }

    syn boolean Pattern.isVariable() = false;
    eq ExplicitTypeNamePattern.isVariable() = getAccess().isVariable();

    syn String Pattern.variableName() {
        throw new InternalCompilerError(
            "variableName() not defined for " + getClass().getName() + ")");
    }
    eq ExplicitTypeNamePattern.variableName() = getAccess().variableName();

    syn String Access.variableName() {
        throw new InternalCompilerError(
            "variableName() not defined for " + getClass().getName() + ")");
    }
    eq VarAccess.variableName() = name();

    syn TypeDecl Pattern.type() {
        throw new InternalCompilerError(
            "type() not defined for " + getClass().getName() + ")");
    }
    eq ExplicitTypeNamePattern.type() = getAccess().type();



    //
    // Code generation for pointcut declarations
    //
    syn lazy abc.weaving.aspectinfo.PointcutDecl PointcutDecl.pointcutDecl()
    {
        return new abc.weaving.aspectinfo.PointcutDecl(
                    name(),
                    formals(),
                    isAbstract() ? null : getPointcutExpr().pointcut(),
                    aspectClass(),
                    pos());
    }

    protected java.util.List PointcutDecl.formals()
    {
        ArrayList list = new ArrayList();
        for (int i = 0; i < getNumParameter(); i++)
            list.add(getParameter(i).formal());
        return list;
    }

    public void PointcutDecl.jimplify2()
    {
        globalAspectInfo().addPointcutDecl(pointcutDecl());
        getPointcutExpr().jimplify2();
    }



    //
    // Code generation for if-pointcuts
    //
    public void IfPointcutExpr.jimplify2()
    {
        SootMethod method = sootMethod();
        JimpleBody body = Jimple.v().newBody(method);
        method.setActiveBody(body);
        Body b = new Body(hostType(), body, this);

        Iterator i = pointcutFormals().iterator();
        int count = 0;
        while (i.hasNext()) {
            ParameterDeclaration param = (ParameterDeclaration) i.next();
            if (this.refersTo(param)) {
                Type type = param.type().getSootType();
                param.local = b.newLocal(param.name(), type);
                b.setLine(param);
                b.add(Jimple.v().newIdentityStmt(param.local,
                    Jimple.v().newParameterRef(type, count++)));
            }
        }

        b.add(Jimple.v().newReturnStmt(
            getExpr().asImmediate(b, getExpr().eval(b))));
    }

    syn lazy java.util.List IfPointcutExpr.methodVars()
    {
        java.util.List vars = new java.util.ArrayList();
        Iterator i = pointcutFormals().iterator();
        while (i.hasNext()) {
            ParameterDeclaration param = (ParameterDeclaration) i.next();
            if (this.refersTo(param))
                vars.add(new Var(param.name(), polyglot.util.
                                 Position.COMPILER_GENERATED));
        }
        return vars;
    }

    inh TypeDecl PointcutExpr.hostType();

    syn lazy SootMethod IfPointcutExpr.sootMethod()
    {
        String name = "if$" + hostType().adviceCounter++;
        java.util.List paramtypes = new java.util.ArrayList();
        Type returntype = soot.BooleanType.v();
        int modifiers = soot.Modifier.STATIC | soot.Modifier.PUBLIC;

        Iterator i = pointcutFormals().iterator();
        while (i.hasNext()) {
            ParameterDeclaration param = (ParameterDeclaration) i.next();
            if (this.refersTo(param))
                paramtypes.add(param.type().getSootType());
        }

        SootMethod method =
            new SootMethod(name, paramtypes, returntype, modifiers);
        hostType().getSootClassDecl().addMethod(method);

        return method;
    }

    syn lazy MethodSig IfPointcutExpr.methodSig()
    {
        return AbcFactory.MethodSig(sootMethod());
    }
}
