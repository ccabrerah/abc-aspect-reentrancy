/* abc - The AspectBench Compiler
 * Copyright (C) 2008 Pavel Avgustinov
 * Copyright (C) 2008 Torbjorn Ekman
 * Copyright (C) 2008 Julian Tibble
 *
 * This compiler is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This compiler is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

aspect Patterns
{
    // Check if a pattern contains a wildcard
    syn boolean Pattern.containsWildcard() = false;
    eq DotDotNamePattern.containsWildcard() = true;
    eq SimpleNamePattern.containsWildcard() =
            getPattern().indexOf('*') != -1;
    eq DotNamePattern.containsWildcard() =
            getLhs().containsWildcard() || getRhs().containsWildcard();

    syn Pattern Pattern.patternRoot() {
      Pattern root = this;
      while(root.getParent() instanceof Pattern && !root.denotesMember())
        root = (Pattern)root.getParent();
      return root;
    }
    
    inh boolean Pattern.denotesMember();

    // Does this DotNamePattern correspond to a classtype_dot_id, i.e. is the Rhs
    // a member pattern, or is the whole thing a type pattern?
    inh boolean DotNamePattern.denotesMember();
    // In these cases, Rhs is a member pattern.
    eq MethodPattern.getMemberNamePattern().denotesMember() = true;
    eq ConstructorPattern.getMemberNamePattern().denotesMember() = true;
    eq FieldPattern.getMemberNamePattern().denotesMember() = true;
    
    // Default: Try to interpret as non-member type pattern.
    eq TypeDecl.getBodyDecl().denotesMember() = false;
    eq AspectDecl.getPerClause().denotesMember() = false;
    eq Program.getChild().denotesMember() = false;
    
    // Children of Dot[Dot]NamePattern are never member patterns.
    eq DotNamePattern.getLhs().denotesMember() = false;
    eq DotNamePattern.getRhs().denotesMember() = false;
    eq DotDotNamePattern.getLhs().denotesMember() = false;
    eq DotDotNamePattern.getRhs().denotesMember() = false;
    
    syn boolean Pattern.isExplicitTypeName() = false;
    eq ExplicitTypeNamePattern.isExplicitTypeName() = true;
    eq SubtypeNamePattern.isExplicitTypeName() = true;
    // Rewrite all DotNamePatterns that denote a type and contain no
    // wildcards to ExplicitTypeNamePatterns.
    rewrite DotNamePattern {
    	when(denotesMember() && !getLhs().containsWildcard() && !getLhs().isExplicitTypeName())
    	to DotNamePattern {
    		setLhs(new ExplicitTypeNamePattern(getLhs().buildAccess()));
    		return this;
    	}
    	when(!denotesMember() && !patternRoot().containsWildcard())
    	to ExplicitTypeNamePattern {
    		return new ExplicitTypeNamePattern(buildAccess());
    	}
    }
    rewrite SubtypeNamePattern {
    	when(!getPattern().containsWildcard() && !getPattern().isExplicitTypeName())
    	to SubtypeNamePattern {
    		setPattern(new ExplicitTypeNamePattern(getPattern().buildAccess()));
    		return this;
    	}
    }
    
    // Build Access nodes for patterns with no wildcards
    protected Access Pattern.buildAccess()
    {
        throw new RuntimeException(
                "buildAccess() not supported for " + getClass().getName());
    }

    protected Access SimpleNamePattern.buildAccess()
    {
        return new ParseName(getPattern());
    }

    protected Access ExplicitTypeNamePattern.buildAccess()
    {
        return getAccess();
    }

    protected Access DotNamePattern.buildAccess()
    {
        return getLhs().buildAccess().qualifiesAccess(getRhs().buildAccess());
    }


    // Getting the base of a member-pattern...
    syn Pattern Pattern.base()
    {
        throw new InternalCompilerError(
            "base() is undefined for " + getClass().getName());
    }
    eq DotNamePattern.base() = getLhs();
    eq TypeDotNamePattern.base() = getLhs();
    eq DotDotNamePattern.base() = getLhs();

    syn NameType Pattern.predNameType() = NameType.AMBIGUOUS_NAME;
    eq DotNamePattern.getLhs().nameType() = getRhs().predNameType();
    eq DotNamePattern.predNameType() = getLhs().predNameType();
    eq ExplicitTypeNamePattern.predNameType() = getAccess().predNameType();
    eq SimpleNamePattern.predNameType() = NameType.AMBIGUOUS_NAME;


    // syntactic classification of explicit names in patterns
    // (see SyntacticClassification.jrag)
    eq AdviceDecl.getPointcutExpr().nameType() =
        NameType.TYPE_NAME;
    eq AspectDecl.getPerClause().nameType() =
        NameType.TYPE_NAME;
    
    eq DeclareWarning.getPointcutExpr().nameType() =
        NameType.TYPE_NAME;
    eq DeclareError.getPointcutExpr().nameType() =
        NameType.TYPE_NAME;
    eq DeclareSoft.getPointcutExpr().nameType() =
        NameType.TYPE_NAME;
    eq DeclareSoft.getAccess().nameType() =
        NameType.TYPE_NAME;
    eq DeclareParentsExtends.getPattern().nameType() =
        NameType.TYPE_NAME;
    eq DeclareParentsExtends.getTypeAccess().nameType() =
        NameType.TYPE_NAME;
    eq DeclareParentsImplements.getPattern().nameType() =
        NameType.TYPE_NAME;
    eq DeclareParentsImplements.getTypeAccess().nameType() =
        NameType.TYPE_NAME;
    eq DeclarePrecedence.getPattern().nameType() =
        NameType.TYPE_NAME;
    
    eq PointcutDecl.getPointcutExpr().nameType() =
        NameType.TYPE_NAME;
    
    
    eq ArgsPointcutExpr.getPattern(int i).nameType() =
            NameType.AMBIGUOUS_NAME;
    eq ThisPointcutExpr.getPattern().nameType() =
            NameType.AMBIGUOUS_NAME;
    eq TargetPointcutExpr.getPattern().nameType() =
            NameType.AMBIGUOUS_NAME;

    // syntactic classification of method/constructor/field patterns
    // defaults:
    syn boolean MemberPattern.isMethodPattern() = false;
    syn boolean MemberPattern.isConstructorPattern() = false;
    syn boolean MemberPattern.isFieldPattern() = false;
    // overrides:
    syn boolean MethodPattern.isMethodPattern() = true;
    syn boolean ConstructorPattern.isConstructorPattern() = true;
    syn boolean FieldPattern.isFieldPattern() = true;

    // when does a constructor pattern match the empty
    // argument list?
    syn boolean ConstructorPattern.matchesEmptyArgList()
    {
        for (int i = 0; i < getNumFormalPattern(); i++)
            if (!getFormalPattern(i).matchesEmptyArgList())
                return false;
                
        return true;
    }

    syn boolean FormalPattern.matchesEmptyArgList() = false;
    syn boolean WildcardFormalPattern.matchesEmptyArgList() = true;
    
    // ASTNode.toString() is "" unless overridden, so let's do something 
    // more useful for patterns (possibly better off in a PrettyPrint
    // jrag?):
    public String AndPattern.toString() {
    	return "(" + getLhs() + ") && (" + getRhs() + ")";
    }
    public String OrPattern.toString() {
    	return "(" + getLhs() + ") || (" + getRhs() + ")";
    }
    public String NegPattern.toString() {
    	return "!(" + getPattern() + ")";
    }
    public String SimpleNamePattern.toString() {
    	return getPattern();
    }
    public String DotNamePattern.toString() {
    	return getLhs() + "." + getRhs();
    }
    public String DotDotNamePattern.toString() {
    	return getLhs() + ".." + getRhs();
    }
    public String TypeDotNamePattern.toString() {
    	return getLhs() + "." + getRhs();
    }
    public String ExplicitTypeNamePattern.toString() {
    	return getAccess().toString();
    }
    public String SubtypeNamePattern.toString() {
    	return getPattern() + "+";
    }
    public String ArraytypeNamePattern.toString() {
    	String dims = "";
    	for(int i = 0; i < getNumDims(); i++) {
    		dims += "[]";
    	}
    	return getPattern() + dims;
    }
}
