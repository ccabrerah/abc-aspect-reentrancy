/* abc - The AspectBench Compiler
 * Copyright (C) 2008 Pavel Avgustinov
 * Copyright (C) 2008 Torbjorn Ekman
 * Copyright (C) 2008 Julian Tibble
 *
 * This compiler is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This compiler is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

aspect Privileged {
  inh boolean Modifiers.mayBePrivileged();
  eq Program.getChild().mayBePrivileged() = false;
  eq AspectDecl.getModifiers().mayBePrivileged() = true;
  syn lazy boolean Modifiers.isPrivileged() = numModifier("privileged") != 0;
  syn boolean TypeDecl.isPrivileged() = getModifiers().isPrivileged() || isNestedType() && enclosingType().isPrivileged();

  refine Modifiers public void Modifiers.checkModifiers() {
    Modifiers.Modifiers.checkModifiers();
    if(numModifier("privileged") > 1)
      error("only one privileged allowed");
    else if(isPrivileged() && !mayBePrivileged())
      error("modifier privileged not allowed in this context");
  }

  refine DeclareParentsAnalysis eq TypeDecl.accessibleFrom(TypeDecl type) {
    if(type.isPrivileged())
      return true;
    return DeclareParentsAnalysis.TypeDecl.accessibleFrom(type);
  }

  refine IntertypeFieldNameAnalysis eq IntertypeFieldDeclaration.accessibleFrom(TypeDecl type) {
    if(type.isPrivileged())
      return true;
    return IntertypeFieldNameAnalysis.IntertypeFieldDeclaration.accessibleFrom(type);
  }

  refine AccessControl eq FieldDeclaration.accessibleFrom(TypeDecl type) {
    if(type.isPrivileged())
      return true;
    return AccessControl.FieldDeclaration.accessibleFrom(type);
  }


  refine IntertypeMethodNameAnalysis eq IntertypeMethodDecl.accessibleFrom(TypeDecl type) {
    if(type.isPrivileged())
      return true;
    return IntertypeMethodNameAnalysis.IntertypeMethodDecl.accessibleFrom(type);
  }

  refine AccessControl eq MethodDecl.accessibleFrom(TypeDecl type) {
    if(type.isPrivileged())
      return true;
    return AccessControl.MethodDecl.accessibleFrom(type);
  }



  refine IntertypeConstructorNameAnalysis eq IntertypeConstructorDecl.accessibleFrom(TypeDecl type) {
    if(type.isPrivileged())
      return true;
    return IntertypeConstructorNameAnalysis.IntertypeConstructorDecl.accessibleFrom(type);
  }

  refine DeclareParentsAnalysis eq ConstructorDecl.accessibleFrom(TypeDecl type) {
    if(type.isPrivileged())
      return true;
    return DeclareParentsAnalysis.ConstructorDecl.accessibleFrom(type);
  }


  refine LookupType eq PackageAccess.qualifiedLookupType(String name) {
    SimpleSet c = SimpleSet.emptySet;
    TypeDecl typeDecl = lookupType(packageName(), name);
    if(nextAccess() instanceof ClassInstanceExpr) {
      if(typeDecl != null && typeDecl.accessibleFrom(visibilityContext()))
        c = c.add(typeDecl);
      return c;
    }
    else {
      if(typeDecl != null) {
        if(visibilityContext() != null && typeDecl.accessibleFrom(visibilityContext()))
          c = c.add(typeDecl);
        else if(visibilityContext() == null && typeDecl.accessibleFromPackage(hostPackage()))
          c = c.add(typeDecl);
      }
      return c;
    }
  }
    
  refine LookupType public SimpleSet Expr.keepAccessibleTypes(SimpleSet oldSet) {
    SimpleSet newSet = SimpleSet.emptySet;
    TypeDecl hostType = visibilityContext();
    for(Iterator iter = oldSet.iterator(); iter.hasNext(); ) {
      TypeDecl t = (TypeDecl)iter.next();
      if((hostType != null && t.accessibleFrom(hostType)) || (hostType == null && t.accessibleFromPackage(hostPackage())))
        newSet = newSet.add(t);
    }
    return newSet;
  }

  refine LookupMethod eq MethodAccess.accessible(MethodDecl m) {
    if(visibilityContext().isPrivileged())
      return true;
    if(!isQualified())
      return true;
    if(!m.accessibleFrom(visibilityContext())) {
      return false;
    }
    // the method is not accessible if the type is not accessible
    if(!qualifier().type().accessibleFrom(visibilityContext())) {
      return false;
    }
    // 6.6.2.1 -  include qualifier type for protected access
    if(m.isProtected() && !m.hostPackage().equals(hostPackage()) && !m.isStatic() && !qualifier().isSuperAccess()) {
      TypeDecl C = m.hostType();
      TypeDecl S = visibilityContext().subclassWithinBody(C);
      TypeDecl Q = qualifier().type();
      if(!visibilityContext().isPrivileged() && (S == null || !Q.instanceOf(S))) {
        return false;
      }
    }
    return true;
  }

  refine IntertypeFieldNameAnalysis private boolean Expr.mayAccess(FieldDeclaration f) {
    if(enclosingBodyDecl() != null && enclosingBodyDecl().hostType().isAspectDecl() && enclosingBodyDecl().hostType().isPrivileged())
      return true;
    return IntertypeFieldNameAnalysis.Expr.mayAccess(f);
  }

}
