/* abc - The AspectBench Compiler
 * Copyright (C) 2008 Pavel Avgustinov
 * Copyright (C) 2008 Torbjorn Ekman
 * Copyright (C) 2008 Julian Tibble
 *
 * This compiler is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This compiler is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

import polyglot.util.InternalCompilerError;

aspect AdviceCodegen {
  inh Aspect BodyDecl.aspectClass();
  eq TypeDecl.getBodyDecl().aspectClass() = globalAspectInfo().getAspect(abcClass());
  eq Program.getCompilationUnit().aspectClass() { throw new Error("Missing equation for aspectClass()"); }

  public int TypeDecl.adviceCounter = 0;
  syn lazy String AdviceDecl.name() =
    getAdviceSpec().kind() + "$" + hostType().adviceCounter++;

  syn String AdviceSpec.kind();
  eq BeforeSpec.kind() = "before";
  eq AfterSpec.kind() = "after";
  eq AfterReturningSpec.kind() = "after";
  eq AfterThrowingSpec.kind() = "after";
  eq AroundSpec.kind() = "around";

  syn boolean AdviceDecl.isEnabled() = !(abc.main.Debug.v().lazyAdviceGeneration && getPointcutExpr().isStaticallyFalse());		  
  
  public void AdviceDecl.jimplify1phase2() {
	  if(isEnabled()) {
	    hostType().getSootClassDecl().addMethod(sootMethod());
	    createAspectInfo();
	    getAdviceSpec().jimplify1phase2();
	  }
  }

  syn lazy java.util.List AdviceSpec.paramList() {
    ArrayList list = new ArrayList();
    for(int i = 0; i < getNumParameter(); i++)
      list.add(getParameter(i).type().getSootType());
    return list;
  }

  syn lazy java.util.List AfterReturningSpec.paramList() {
    java.util.List list = super.paramList();
    if(hasReturnParameter())
      list.add(getReturnParameter().type().getSootType());
    return list;
  }

  syn lazy java.util.List AfterThrowingSpec.paramList() {
    java.util.List list = super.paramList();
    if(hasExceptionParameter())
      list.add(getExceptionParameter().type().getSootType());
    return list;
  }

  syn lazy java.util.List AdviceDecl.sootExceptionList() {
    ArrayList list = new ArrayList();
    for (int i = 0; i < getNumException(); i++)
      list.add(getException(i).type().getSootClassDecl());
    return list;
  }

  syn lazy java.util.List AdviceDecl.abcExceptionList() {
    ArrayList list = new ArrayList();
    for (int i = 0; i < getNumException(); i++)
      list.add(AbcFactory.AbcType(getException(i).type().getSootType()));
    return list;
  }

  syn lazy ArrayList AdviceSpec.paramNameList() {
    ArrayList list = new ArrayList();
    for(int i = 0; i < getNumParameter(); i++)
      list.add(getParameter(i).name());
    return list;
  }

  syn lazy ArrayList AfterReturningSpec.paramNameList() {
    ArrayList list = super.paramNameList();
    if(hasReturnParameter())
      list.add(getReturnParameter().name());
    return list;
  }

  syn lazy ArrayList AfterThrowingSpec.paramNameList() {
    ArrayList list = super.paramNameList();
    if(hasExceptionParameter())
      list.add(getExceptionParameter().name());
    return list;
  }

  syn lazy SootMethod AdviceDecl.sootMethod() {
    SootMethod advice =
        new SootMethod(name(), getAdviceSpec().paramList(),
                       returnType().getSootType(),
                       sootTypeModifiers(), sootExceptionList());
    advice.addTag(
        new soot.tagkit.ParamNamesTag(getAdviceSpec().paramNameList()));
    return advice;
  }

  protected void AdviceDecl.createAspectInfo() {
    int[] jp_params = implicitParameters();
    Pointcut pc = getPointcutExpr().pointcut();
    LinkedList methods = new LinkedList();
    getBlock().addAllEnclosedMethodSigs(methods);

    globalAspectInfo().addAdviceDecl(new abc.weaving.aspectinfo.AdviceDecl(
      getAdviceSpec().adviceSpec(),
      pc,
      methodSig(),
      aspectClass(),
      jp_params[0] /*jp*/,
      jp_params[1] /*jpsp*/,
      jp_params[2] /*ejp*/,
      methods,
      pos()
    ));
  }

  // For each advice-declaration, the abc-backend requires a list of the
  // methods that are declared lexically within that piece of advice
  // (for example, in inner/anonymous classes)
  public void ASTNode.addAllEnclosedMethodSigs(LinkedList methods)
  {
    for (int i = 0; i < getNumChild(); i++)
      getChild(i).addAllEnclosedMethodSigs(methods);
  }
  public void MethodDecl.addAllEnclosedMethodSigs(LinkedList methods)
  {
    methods.add(AbcFactory.MethodSig(sootMethod()));
    super.addAllEnclosedMethodSigs(methods);
  }
  public void ConstructorDecl.addAllEnclosedMethodSigs(LinkedList methods)
  {
    methods.add(AbcFactory.MethodSig(sootMethod()));
    super.addAllEnclosedMethodSigs(methods);
  }

  protected java.util.List AdviceSpec.methodFormals() {
    ArrayList list = new ArrayList();
    for(int i = 0; i < getNumParameter(); i++)
      list.add(getParameter(i).formal());
    return list;
  }

  protected java.util.List AfterReturningSpec.methodFormals() {
    java.util.List list = super.methodFormals();
    if (hasReturnParameter())
      list.add(getReturnParameter().formal());
    return list;
  }

  protected java.util.List AfterThrowingSpec.methodFormals() {
    java.util.List list = super.methodFormals();
    if(hasExceptionParameter())
      list.add(getExceptionParameter().formal());
    return list;
  }

  protected MethodSig AdviceDecl.methodSig() {
    return new MethodSig(
      sootTypeModifiers(),
      AbcFactory.AbcClass(hostType().getSootClassDecl()),
      AbcFactory.AbcType(returnType().getSootType()),
      name(),
      getAdviceSpec().methodFormals(),
      abcExceptionList(),
      pos()
    );
  }

  abstract public abc.weaving.aspectinfo.AdviceSpec AdviceSpec.adviceSpec();

  public abc.weaving.aspectinfo.AdviceSpec BeforeSpec.adviceSpec() {
    return new BeforeAdvice(pos());
  }
  public abc.weaving.aspectinfo.AdviceSpec AfterSpec.adviceSpec() {
    return new AfterAdvice(pos());
  }
  public abc.weaving.aspectinfo.AdviceSpec AfterReturningSpec.adviceSpec() {
    if(hasReturnParameter())
      return new AfterReturningArgAdvice(
                    getReturnParameter().formal(), pos());
    else
      return new AfterReturningAdvice(pos());
  }
  public abc.weaving.aspectinfo.AdviceSpec AfterThrowingSpec.adviceSpec() {
    if(hasExceptionParameter())
      return new AfterThrowingArgAdvice(
                    getExceptionParameter().formal(), pos());
    else
      return new AfterThrowingAdvice(pos());
  }
  public abc.weaving.aspectinfo.AdviceSpec AroundSpec.adviceSpec() {
    MethodCategory.register(proceedSig(), MethodCategory.PROCEED);
    AbcType return_type = AbcFactory.AbcType(returnType().getSootType());
    return new AroundAdvice(return_type, proceedSig(), pos());
  }

  syn int AdviceDecl.sootTypeModifiers() {
    int result = 0;
    result |= soot.Modifier.PUBLIC;
    if(getModifiers().isSynchronized()) result |= soot.Modifier.SYNCHRONIZED;
    if(getModifiers().isStrictfp()) result |= soot.Modifier.STRICTFP;
    return result;
  }

  public void AdviceSpec.jimplify2(Body b) {
    for(int i = 0; i < getNumParameter(); i++)
      getParameter(i).jimplify2(b);
  }

  // in order to jimplify the return parameter correctly
  eq AfterReturningSpec.getReturnParameter().localNum() = getNumParameter();

  public void AfterReturningSpec.jimplify2(Body b) {
    super.jimplify2(b);
    if (hasReturnParameter())
      getReturnParameter().jimplify2(b);
  }

  // in order to jimplify the exception parameter correctly
  eq AfterThrowingSpec.getExceptionParameter().localNum() = getNumParameter();

  public void AfterThrowingSpec.jimplify2(Body b) {
    super.jimplify2(b);
    if (hasExceptionParameter())
      getExceptionParameter().jimplify2(b);
  }

  public void AdviceDecl.jimplify2() {
	  if(isEnabled()) {
	    JimpleBody body = Jimple.v().newBody(sootMethod());
	    sootMethod().setActiveBody(body);
	    Body b = new Body(hostType(), body, this);
	    getAdviceSpec().jimplify2(b);
	    getBlock().jimplify2(b);
	    if (getBlock().canCompleteNormally())
	        b.add(Jimple.v().newReturnVoidStmt());
	    getAdviceSpec().jimplify2();
	    getPointcutExpr().jimplify2();
	    MethodCategory.register(sootMethod(), MethodCategory.ADVICE_BODY);
	  }
  }
  eq AdviceSpec.getParameter(int index).localNum() = index;



  //
  // proceed calls
  //

  syn AroundSpec AdviceSpec.aroundSpec() = null;
  eq AroundSpec.aroundSpec() = this;

  inh AroundSpec Proceed.aroundSpec();
  eq Program.getCompilationUnit().aroundSpec() = null;
  eq AdviceDecl.getBlock().aroundSpec() = getAdviceSpec().aroundSpec();

  protected java.util.List AroundSpec.proceedFormals()
  {
    ArrayList list = new ArrayList();
    for(int i = 0; i < getNumAroundParameter(); i++)
      list.add(getAroundParameter(i).formal());
    return list;
  }

  protected java.util.List AroundSpec.proceedParamList()
  {
    ArrayList list = new ArrayList();
    for(int i = 0; i < getNumAroundParameter(); i++)
        list.add(getAroundParameter(i).type().getSootType());
    return list;
  }

  syn lazy String AdviceDecl.proceedName() = "proceed" + name().substring(6);

  inh lazy MethodSig AroundSpec.proceedSig();
  eq AdviceDecl.getAdviceSpec().proceedSig() {
    return new MethodSig(
      soot.Modifier.PUBLIC | soot.Modifier.FINAL | soot.Modifier.STATIC,
      AbcFactory.AbcClass(hostType().getSootClassDecl()),
      AbcFactory.AbcType(returnType().getSootType()),
      proceedName(),
      getAdviceSpec().aroundSpec().proceedFormals(),
      new ArrayList(),
      pos());
  }

  private ArrayList Proceed.buildProceedArgs(Body b)
  {
    ArrayList list = new ArrayList();
    AroundSpec spec = aroundSpec();
    int arg = 0;

    for(int i = 0; i < spec.getNumAroundParameter(); i++)
    {
      TypeDecl type = spec.getAroundParameter(i).type();
      list.add(
        asImmediate(b, getArg(arg).type().emitCastTo(b, getArg(arg), type))
      );
      arg++;
    }
    return list;
  }

  inh Aspect AdviceSpec.aspectClass();
  inh TypeDecl AdviceSpec.hostType();

  public soot.Value Proceed.eval(Body b)
  {
    AroundSpec spec = aroundSpec();
    soot.SootMethodRef ref = spec.proceedSig().getSootMethodRef();
    ArrayList args = buildProceedArgs(b);

    soot.Value result = Jimple.v().newStaticInvokeExpr(ref, args);

    return spec.returnType().isVoid() ?
                result : asLocal(b, result, type().getSootType());
  }

  syn lazy SootMethod AroundSpec.proceedMethod()
  {
    MethodSig ms = aroundSpec().proceedSig();
    SootMethod m = new SootMethod(ms.getName(), proceedParamList(),
                        ms.getReturnType().getSootType(), ms.getModifiers(),
                        new ArrayList());
    return m;
  }

  public void AdviceSpec.jimplify1phase2() { }

  public void AroundSpec.jimplify1phase2()
  {
    hostType().getSootClassDecl().addMethod(proceedMethod());
  }

  public void AroundSpec.jimplify2()
  {
    JimpleBody body = Jimple.v().newBody(proceedMethod());
    proceedMethod().setActiveBody(body);
    Body b = new Body(hostType(), body, this);
    jimplify2(b);
    b.add(Jimple.v().newReturnVoidStmt());
  }
}
