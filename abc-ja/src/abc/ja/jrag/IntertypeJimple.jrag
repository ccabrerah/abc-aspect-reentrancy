/* abc - The AspectBench Compiler
 * Copyright (C) 2008 Pavel Avgustinov
 * Copyright (C) 2008 Torbjorn Ekman
 * Copyright (C) 2008 Julian Tibble
 *
 * This compiler is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This compiler is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

aspect IntertypeJimple {

  refine Expressions public soot.Value VarAccess.eval(Body b) {
    if(decl() instanceof IntertypeFieldDeclaration) {
      IntertypeFieldDeclaration f = (IntertypeFieldDeclaration)decl();

      if (f.hostType().isInterfaceDecl()) {
        soot.Local base = base(b);
        ArrayList list = new ArrayList();

        if (fieldQualifierType().isInterfaceDecl()) {
          return Jimple.v().newInterfaceInvokeExpr(
            base,
            f.createInterfaceGetter().sootRef(),
            list);
        }
        return Jimple.v().newInstanceFieldRef(
          base,
          f.introducedSootRef(fieldQualifierType()));
      }
    }
    return Expressions.VarAccess.eval(b);
  }

  refine Expressions public soot.Value VarAccess.emitStore(Body b, soot.Value lvalue, soot.Value rvalue) {
    if(decl() instanceof IntertypeFieldDeclaration) {
      IntertypeFieldDeclaration f = (IntertypeFieldDeclaration)decl();

      if (f.hostType().isInterfaceDecl()) {
        soot.Local base = base(b);
        ArrayList list = new ArrayList();
        list.add(asLocal(b, rvalue, lvalue.getType()));

        if (fieldQualifierType().isInterfaceDecl()) {
          return asLocal(b,
            Jimple.v().newInterfaceInvokeExpr(
              base,
              f.createInterfaceSetter().sootRef(),
              list));
        }
      }
    }
    return Expressions.VarAccess.emitStore(b, lvalue, rvalue);
  }

  SootFieldRef IntertypeFieldDeclaration.introducedSootRef(TypeDecl base)
  {
    return Scene.v().makeFieldRef(
      base.getSootClassDecl(),
      introducedName(),
      type().getSootType(),
      isStatic()
    );
  }

  refine Expressions private SootMethodRef MethodAccess.sootRef() {
    if(decl() instanceof IntertypeMethodDecl) {
      IntertypeMethodDecl decl = (IntertypeMethodDecl)decl();
      ArrayList parameters = new ArrayList();
      for(int i = 0; i < decl.getNumParameter(); i++)
        parameters.add(decl.getParameter(i).type().getSootType());
      SootMethodRef ref = Scene.v().makeMethodRef(
        methodQualifierType().getSootClassDecl(),
        decl.delegateName(),
        parameters,
        decl.type().getSootType(),
        decl.isStatic()
      );
      return ref;
    }
    return Expressions.MethodAccess.sootRef();
  }

  eq AspectDecl.sootTypeModifiers() {
    int result = 0;
    result |= soot.Modifier.PUBLIC;
    if(isFinal()) result |= soot.Modifier.FINAL;
    if(isStatic()) result |= soot.Modifier.STATIC;
    if(isAbstract()) result |= soot.Modifier.ABSTRACT;
    return result;
  }

}




