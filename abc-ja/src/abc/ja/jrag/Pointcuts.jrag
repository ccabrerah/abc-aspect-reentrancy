/* abc - The AspectBench Compiler
 * Copyright (C) 2008 Pavel Avgustinov
 * Copyright (C) 2008 Torbjorn Ekman
 * Copyright (C) 2008 Julian Tibble
 *
 * This compiler is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This compiler is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

aspect Pointcuts
{
    // ----------------------------------------------------
    //   Pointcut declarations
    // ----------------------------------------------------
    //
    // To be a BodyDecl, PointcutDecl must answer some
    // questions about its children.

    eq PointcutDecl.getParameter(int i).isMethodParameter() = false;
    eq PointcutDecl.getParameter(int i).isConstructorParameter() = false;
    eq PointcutDecl.getParameter(int i).isExceptionHandlerParameter() = false;
    eq PointcutDecl.getParameter(int i).nameType() = NameType.TYPE_NAME;
    
    eq PointcutDecl.getImplicit(int i).isMethodParameter() = false;
    eq PointcutDecl.getImplicit(int i).isConstructorParameter() = false;
    eq PointcutDecl.getImplicit(int i).isExceptionHandlerParameter() = false;
    eq PointcutDecl.getImplicit(int i).nameType() = NameType.TYPE_NAME;
    
    eq NamedPointcutExpr.getPattern(int i).nameType() = NameType.AMBIGUOUS_NAME;


    // Modifiers allowed for pointcut declarations

    eq PointcutDecl.getModifiers().mayBePublic() = true;
    eq PointcutDecl.getModifiers().mayBePrivate() = true;
    eq PointcutDecl.getModifiers().mayBeProtected() = true;
    eq PointcutDecl.getModifiers().mayBeAbstract() = true;
    eq PointcutDecl.getModifiers().mayBeFinal() = true;

    syn boolean PointcutDecl.isPublic() = getModifiers().isPublic();
    syn boolean PointcutDecl.isPrivate() = getModifiers().isPrivate();
    syn boolean PointcutDecl.isProtected() = getModifiers().isProtected();
    syn boolean PointcutDecl.isAbstract() = getModifiers().isAbstract();
    syn boolean PointcutDecl.isFinal() = getModifiers().isFinal();


    // Pointcut variables are those declared by named pointcut declarations
    // or advice (see Advice.jrag)
    inh boolean Variable.isPointcutVariable();
    eq Program.getCompilationUnit().isPointcutVariable() = false;
    eq PointcutDecl.getParameter(int i).isPointcutVariable() = true;
    eq PointcutDecl.getImplicit(int i).isPointcutVariable() = true;



    eq IfPointcutExpr.getExpr().nameType() = NameType.EXPRESSION_NAME;

    // Is a pointcut empty?
    syn boolean PointcutExpr.isEmpty() = false;
    eq EmptyPointcutExpr.isEmpty() = true;

    // check that variables used in an if-pointcut are bound --- not
    // just by the whole pointcut, but within the containing cflow
    public void IfPointcutExpr.typeCheck()
    {
        super.typeCheck();
        Iterator i = pointcutFormals().iterator();
        while (i.hasNext()) {
            ParameterDeclaration param = (ParameterDeclaration) i.next();
            if (!param.isImplicit() && this.refersTo(param) &&
                !bindsInCurrentCflow(param.name()))
            {
                error("Pointcut formal " + param.name() +
                      " is not bound within the enclosing cflow:" +
                      " it cannot be used within this if(..)");
            }
        }
    }

    // variables may not be bound under negation in a pointcut expression
    public void NegPointcutExpr.typeCheck()
    {
        super.typeCheck();
        Iterator i = pointcutFormals().iterator();
        while (i.hasNext()) {
            ParameterDeclaration param = (ParameterDeclaration) i.next();
            if (getPointcutExpr().binds(param.name()) > 0)
                error("Pointcut formal " + param.name() +
                    " cannot be bound within a negated pointcut expression");
        }
    }

    inh boolean PointcutExpr.bindsInCurrentCflow(String name);
    eq AdviceDecl.getPointcutExpr().bindsInCurrentCflow(String name) =
        getPointcutExpr().binds(name) > 0;
    eq PointcutDecl.getPointcutExpr().bindsInCurrentCflow(String name) =
        getPointcutExpr().binds(name) > 0;
    eq DeclareSoft.getPointcutExpr().bindsInCurrentCflow(String name) =
        getPointcutExpr().binds(name) > 0;
    eq DeclareWarning.getPointcutExpr().bindsInCurrentCflow(String name) =
        getPointcutExpr().binds(name) > 0;
    eq DeclareError.getPointcutExpr().bindsInCurrentCflow(String name) =
        getPointcutExpr().binds(name) > 0;
    eq PerTarget.getPointcutExpr().bindsInCurrentCflow(String name) =
        getPointcutExpr().binds(name) > 0;
    eq PerThis.getPointcutExpr().bindsInCurrentCflow(String name) =
        getPointcutExpr().binds(name) > 0;
    eq PerCflow.getPointcutExpr().bindsInCurrentCflow(String name) =
        getPointcutExpr().binds(name) > 0;
    eq PerCflowBelow.getPointcutExpr().bindsInCurrentCflow(String name) =
        getPointcutExpr().binds(name) > 0;
    eq CflowPointcutExpr.getPointcut().bindsInCurrentCflow(String name) =
        getPointcut().binds(name) > 0;
    eq CflowBelowPointcutExpr.getPointcut().bindsInCurrentCflow(String name) =
        getPointcut().binds(name) > 0;



    // The advice/pointcut formal parameters should be visible
    // to the pointcut and the parameters themselves.

    eq PointcutDecl.getParameter(int i).lookupVariable(String name) {
        SimpleSet result = localLookupVariable(name);
        if (!result.isEmpty())
            return result;
        return lookupVariable(name);
    }

    eq PointcutDecl.getPointcutExpr().lookupVariable(String name) {
        SimpleSet result = localLookupVariable(name);
        if (!result.isEmpty())
            return result;
        return lookupVariable(name);
    }

    syn SimpleSet PointcutDecl.localLookupVariable(String name) {
        for (int i = 0; i < getNumImplicit(); i++)
            if (getImplicit(i).name().equals(name))
                return SimpleSet.emptySet.add(getImplicit(i));
        for(int i = 0; i < getNumParameter(); i++)
            if(getParameter(i).name().equals(name))
                return SimpleSet.emptySet.add(getParameter(i));
        return SimpleSet.emptySet;
    }

    // want to use lookupVariable on this node
    inh SimpleSet PointcutExpr.lookupVariable(String name);


    // args, this, and target can only refer to pointcut variables
    // or types
    eq ArgsPointcutExpr.getPattern().lookupVariable(String name) =
        lookupPointcutVariable(name);
    eq ThisPointcutExpr.getPattern().lookupVariable(String name) =
        lookupPointcutVariable(name);
    eq TargetPointcutExpr.getPattern().lookupVariable(String name) =
        lookupPointcutVariable(name);

    syn SimpleSet PointcutExpr.lookupPointcutVariable(String name)
    {
        SimpleSet result = SimpleSet.emptySet;
        Iterator iter = lookupVariable(name).iterator();
        while (iter.hasNext()) {
            Variable v = (Variable)iter.next();
            if(v.isPointcutVariable())
                result = result.add(v);
        }
        return result;
    }


    // ----------------------------------------------------
    //   Looking up named pointcuts
    // ----------------------------------------------------

    syn String PointcutDecl.name() = getID();
    syn String PointcutAccess.name() = getID();
    eq PointcutAccess.predNameType() = NameType.TYPE_NAME;

    syn PointcutDecl PointcutAccess.decl()
    {
        SimpleSet decls = decls();
        if (decls.size() == 1) 
            return (PointcutDecl) decls.iterator().next();
        return null;
    }

    syn SimpleSet PointcutAccess.decls()
    {
        SimpleSet concrete = SimpleSet.emptySet;
        SimpleSet abstr = SimpleSet.emptySet;

        Iterator i = lookupPointcut(name()).iterator();
        while (i.hasNext()) {
            PointcutDecl decl = (PointcutDecl) i.next();
            if (decl.isAbstract())
                abstr = abstr.add(decl);
            else
                concrete = concrete.add(decl);
        }
        if (concrete.isEmpty())
            return abstr;
        else
            return concrete;
    }

    public void PointcutAccess.nameCheck()
    {
        SimpleSet decls = decls();
        if (decls.size() == 0)
            error("Cannot find pointcut " + name());
        else if (decls.size() > 1)
            error("Ambiguous reference to pointcut " + name());
    }

    inh SimpleSet PointcutAccess.lookupPointcut(String name);
    inh SimpleSet TypeDecl.lookupPointcut(String name);
    eq Program.getCompilationUnit().lookupPointcut(String name) =
        SimpleSet.emptySet;
    eq TypeDecl.getBodyDecl(int i).lookupPointcut(String name) {
        SimpleSet set = lookupMemberPointcut(name);
        if(!set.isEmpty()) return set;
        return lookupPointcut(name);
    }
    eq AspectDecl.getPerClause().lookupPointcut(String name) {
        SimpleSet set = lookupMemberPointcut(name);
        if(!set.isEmpty()) return set;
        return lookupPointcut(name);
    }
    eq AbstractDot.getRight().lookupPointcut(String name) =
        getLeft().type().lookupMemberPointcut(name);


    syn SimpleSet TypeDecl.lookupMemberPointcut(String name)
    {
        SimpleSet decls;
        for (int i = 0; i < getNumBodyDecl(); i++) {
            decls = getBodyDecl(i).lookupMemberPointcut(name);
            if (decls.size() > 0)
                return decls;
        }
        return lookupInheritedPointcut(name);
    }

    syn SimpleSet TypeDecl.lookupInheritedPointcut(String name) =
        SimpleSet.emptySet;

    eq ClassDecl.lookupInheritedPointcut(String name)
    {
        SimpleSet decls = SimpleSet.emptySet;

        if (hasSuperclass()) {
            Iterator i = superclass().lookupMemberPointcut(name).iterator();
            while (i.hasNext())
                decls = decls.add(i.next());
        }

        Iterator i = interfacesIterator();
        while (i.hasNext()) {
            TypeDecl iface = (TypeDecl) i.next();
            Iterator j = iface.lookupMemberPointcut(name).iterator();
            while (j.hasNext())
                decls = decls.add(j.next());
        }

        return decls;
    }

    eq InterfaceDecl.lookupInheritedPointcut(String name)
    {
        SimpleSet decls = SimpleSet.emptySet;

        Iterator i = superinterfacesIterator();
        while (i.hasNext()) {
            TypeDecl iface = (TypeDecl) i.next();
            Iterator j = iface.lookupMemberPointcut(name).iterator();
            while (j.hasNext())
                decls = decls.add(j.next());
        }

        return decls;
    }

    syn SimpleSet BodyDecl.lookupMemberPointcut(String name);
    eq BodyDecl.lookupMemberPointcut(String name) = SimpleSet.emptySet;
    eq PointcutDecl.lookupMemberPointcut(String name)
    {
        if (name.equals(name()))
            return SimpleSet.emptySet.add(this);
        return SimpleSet.emptySet;
    }

    eq PointcutAccess.dumpString() = super.dumpString() + " " + decl().name();

    
    // check for overriding pointcuts with the wrong number/types of parameters
    public void PointcutDecl.overrideParameterCheck()
    {
        Iterator i = hostType().lookupInheritedPointcut(name()).iterator();
        while (i.hasNext()) {
            PointcutDecl decl = (PointcutDecl) i.next();
            if (differentParams(decl))
                error("The pointcut " + hostType().typeName() + "." + name()
                      + " cannot override definition in "
                      + decl.hostType().typeName() 
                      + " because parameter types differ.");
                     
        }
    }

    syn boolean PointcutDecl.differentParams(PointcutDecl other)
    {
        if (getNumParameter() != other.getNumParameter())
            return true;
        for (int i = 0 ; i < getNumParameter(); i++)
            if (!getParameter(i).type().equals(other.getParameter(i).type()))
                return true;
        return false;
    }


    public void PointcutDecl.checkModifiers()
    {
        super.checkModifiers();
        if (isAbstract()) {
            if (!hostType().isAspectDecl())
                error("Abstract pointcuts are only allowed in aspects.");
            else if (!hostType().isAbstract())
                error("Pointcut " + hostType().typeName() + "." + name() +
                      " cannot be abstract because " + hostType().typeName() +
                      " is not abstract.");

            if (!getPointcutExpr().isEmpty())
                error("The pointcut " + hostType().typeName() + "." + name() +
                      " is abstract but has a body.");
        }
        if (hostType().isInterfaceDecl() && (isProtected() || isPrivate()))
            error("Pointcuts in interfaces must be public.");

        // check that this pointcut is not overriding another pointcut
        // that has stronger access privileges
        Iterator i = hostType().lookupInheritedPointcut(name()).iterator();
        while (i.hasNext()) {
            PointcutDecl decl = (PointcutDecl) i.next();
            if (weakerAccessPrivilegesThan(decl))
                error("The pointcut " + hostType().typeName() + "." + name() +
                      " cannot override " + decl.hostType().typeName() + "." +
                      decl.name() + " with weaker access privileges");
        }
    }

    syn boolean PointcutDecl.weakerAccessPrivilegesThan(PointcutDecl other)
    {
        // overriding public with non-public
        if (other.isPublic() && !isPublic()) return true;
        // overriding protected with non-public non-protected
        if (other.isProtected() && !isPublic() && !isProtected()) return true;
        // overriding package scope with private
        if (!other.isPrivate() && !other.isProtected() && !other.isPublic()
            && isPrivate()) return true;
        return false;
    }

    public void PointcutDecl.nameCheck()
    {
        super.nameCheck();
        implicitNameCheck();
        circularNameCheck();
        if (hostType().lookupMemberPointcut(name()).iterator().next() != this)
            error("Duplicate definition of pointcut " + name() + ".");
    }


    // Check for cycles in named pointcuts
    public void PointcutDecl.circularNameCheck()
    {
        if(isCircular())
            error("The pointcut " + name() + " has a circular dependency.");
    }

    syn PointcutDecl NamedPointcutExpr.decl() =
        ((PointcutAccess) getName().lastAccess()).decl();

    syn boolean PointcutDecl.isCircular() =
        checkCallGraph(hostType()) == 2;

    // check that a concrete pointcut doesn't call an abstract pointcut
    public void NamedPointcutExpr.checkModifiers()
    {
        if (!hostType().isAbstract() && hostType().isAspectDecl() &&
            callsAbstractPointcut())
        {
            error("Cannot refer to the abstract pointcut " +
                  decl().hostType().typeName() + "." + decl().name() +
                  " from a concrete aspect.");
        }
    }

    syn boolean NamedPointcutExpr.callsAbstractPointcut() =
        checkCallGraph(hostType()) == 1;

    // checkCallGraph(TypeDecl context) is
    //      0 -- if the graph is ok
    //      1 -- if this pointcut depends on an abstract pointcut, but no cycle 
    //      2 -- if this pointcut has a circular dependency
    syn lazy int PointcutDecl.checkCallGraph(TypeDecl context) circular [2] =
        isAbstract() ? 1 : getPointcutExpr().checkCallGraph(context);

    syn lazy int PointcutExpr.checkCallGraph(TypeDecl context) circular [2] = 0;
    eq BinaryPointcutExpr.checkCallGraph(TypeDecl context)
    {
        int left = getLhs().checkCallGraph(context);
        int right = getRhs().checkCallGraph(context);
        return left > right ? left : right;
    }
    eq NegPointcutExpr.checkCallGraph(TypeDecl context) =
        getPointcutExpr().checkCallGraph(context);
    eq CflowPointcutExpr.checkCallGraph(TypeDecl context) =
        getPointcut().checkCallGraph(context);
    eq CflowBelowPointcutExpr.checkCallGraph(TypeDecl context) =
        getPointcut().checkCallGraph(context);
    eq NamedPointcutExpr.checkCallGraph(TypeDecl context)
    {
        // don't give additional error if a pointcut can't be
        // resolved anyway
        if (decl() == null)
            return 0;

        // if the call is qualified, look up normally and use the
        // declaring type as the context
        if (! (getName() instanceof PointcutAccess))
            return decl().checkCallGraph(decl().hostType());

        String name = ((PointcutAccess) getName()).name();
        Iterator i = context.lookupMemberPointcut(name).iterator();
        while (i.hasNext()) {
            PointcutDecl decl = (PointcutDecl) i.next();
            if (!decl.isAbstract())
                return decl.checkCallGraph(context);
        }
        i = context.lookupPointcut(name).iterator();
        while (i.hasNext()) {
            PointcutDecl decl = (PointcutDecl) i.next();
            if (!decl.isAbstract())
                return decl.checkCallGraph(context);
        }
        return 1;
    }



    // check for abstract pointcuts which should be overridden
    refine IntertypeMethodErrorCheck public void TypeDecl.typeCheck()
    {
        IntertypeMethodErrorCheck.TypeDecl.typeCheck();

        if (isAbstract()) return;

        // get all pointcuts _names_ in ancestors
        Iterator i = inheritedPointcuts().iterator();
        while (i.hasNext()) {
            String name = (String) i.next();

            boolean unimplemented = true;
            Iterator j = lookupMemberPointcut(name).iterator();
            PointcutDecl lastdecl = null;
            while (j.hasNext() && unimplemented) {
                lastdecl = (PointcutDecl) j.next();
                unimplemented = lastdecl.isAbstract();
            }
            if (unimplemented) {
                error("The inherited pointcut " +
                      lastdecl.hostType().typeName() + "." + name +
                      " is abstract but not overridden in " + typeName());
            }
        }
    }

    syn lazy Set TypeDecl.inheritedPointcuts()
    {
        Set visited = new HashSet();
        Set names = new HashSet();
        addInheritedPointcuts(visited, names);
        return names;
    }

    public void TypeDecl.addInheritedPointcuts(Set visited, Set names) { }
    public void ClassDecl.addInheritedPointcuts(Set visited, Set names)
    {
        visited.add(this);
        if (hasSuperclass() && !visited.contains(superclass())) {
            superclass().addLocalPointcuts(names);
            superclass().addInheritedPointcuts(visited, names);
        }

        Iterator i = interfacesIterator();
        while (i.hasNext()) {
            TypeDecl iface = (TypeDecl) i.next();
            if (!visited.contains(iface)) {
                iface.addLocalPointcuts(names);
                iface.addInheritedPointcuts(visited, names);
            }
        }
    }
    public void InterfaceDecl.addInheritedPointcuts(Set visited, Set names)
    {
        visited.add(this);
        Iterator i = superinterfacesIterator();
        while (i.hasNext()) {
            TypeDecl iface = (TypeDecl) i.next();
            if (!visited.contains(iface)) {
                iface.addLocalPointcuts(names);
                iface.addInheritedPointcuts(visited, names);
            }
        }
    }
    protected void TypeDecl.addLocalPointcuts(Set names)
    {
        for (int i = 0; i < getNumBodyDecl(); i++)
            getBodyDecl(i).addLocalPointcuts(names);
    }
    public void BodyDecl.addLocalPointcuts(Set names) { }
    public void PointcutDecl.addLocalPointcuts(Set names)
    {
        names.add(name());
    }



    // ----------------------------------------------------
    //   Pointcut variable binding
    // ----------------------------------------------------
    // 
    // For a pointcut, p, p.binds(var) is:
    //   2 - if |p| may bind |var| more than once
    //   1 - if |p| must bind |var| exactly once
    //   0 - otherwise

    syn int PointcutExpr.binds(String var) = 0;

    // binary pointcuts
    eq AndPointcutExpr.binds(String var) {
        int combination = getLhs().binds(var) + getRhs().binds(var);
        return (combination > 2) ? 2 : combination;
    }
    eq OrPointcutExpr.binds(String var) {
        int combination = getLhs().binds(var) * getRhs().binds(var);
        return (combination > 2) ? 2 : combination;
    }
        
    // cflow pointcuts
    eq CflowPointcutExpr.binds(String var) = getPointcut().binds(var);
    eq CflowBelowPointcutExpr.binds(String var) = getPointcut().binds(var);

    // this() and target() are easy...
    eq ThisPointcutExpr.binds(String var) = getPattern().binds(var) ? 1 : 0;
    eq TargetPointcutExpr.binds(String var) = getPattern().binds(var) ? 1 : 0;
    
    // args() and named pointcuts might bind a variable several
    // times, so count them.
    eq ArgsPointcutExpr.binds(String var) {
    	int result = 0;
    	for(int i = 0; i < getNumPattern(); i++) {
    		if(getPattern(i).binds(var))
    			result++;
    	}
    	return (result > 2 ? 2 : result);
    }
    eq NamedPointcutExpr.binds(String var) {
    	int result = 0;
    	for(int i = 0; i < getNumPattern(); i++) {
    		if(getPattern(i).binds(var))
    			result++;
    	}
    	return (result > 2 ? 2 : result);
    }
    
    // The only BindingPattern that binds is the NameBindingPattern, if invoked
    // with a variable name rather than a type name.
    syn boolean BindingPattern.binds(String var) = false;
    eq NameBindingPattern.binds(String var) =
        getPattern().isVariable() && getPattern().variableName().equals(var); 

    // args is only allowed '..' once
    public void ArgsPointcutExpr.nameCheck()
    {
    	int dotdots = 0;
    	for(int i = 0; i < getNumPattern(); i++) {
    		if(getPattern(i).isDotDot())
    			dotdots++;
    	}
        if (dotdots > 1)
            error("The args() pointcut cannot contain more than one \"..\"");
    }
    syn boolean BindingPattern.isDotDot() = false;
    eq DotDotBindingPattern.isDotDot() = true;


    public void ExecutionPointcutExpr.typeCheck()
    {
        super.typeCheck();
        if (getPattern().refersToInterfaceConstructor())
            warning("Interface constructor execution is not a join point" +
                " (consider (..)+ to capture constructors of implementors)");
    }

    syn boolean MemberPattern.refersToInterfaceConstructor() = false;
    eq ConstructorPattern.refersToInterfaceConstructor() =
        getMemberNamePattern().refersToInterface();

    syn boolean NamePattern.refersToInterface() = false;
    eq DotNamePattern.refersToInterface() = getLhs().explicitInterface();

    syn boolean NamePattern.explicitInterface() = false;
    eq ExplicitTypeNamePattern.explicitInterface() = type().isInterfaceDecl();
    
    syn boolean PointcutExpr.isStaticallyFalse() circular [false] = false;
    eq IfPointcutExpr.isStaticallyFalse() = getExpr().type().isBoolean() && getExpr().isConstant() 
    											&& !getExpr().constant().booleanValue();
    eq AndPointcutExpr.isStaticallyFalse() = getLhs().isStaticallyFalse() || getRhs().isStaticallyFalse();
    eq OrPointcutExpr.isStaticallyFalse() = getLhs().isStaticallyFalse() && getRhs().isStaticallyFalse();
    eq NamedPointcutExpr.isStaticallyFalse() = decl().getPointcutExpr().isStaticallyFalse();
}
